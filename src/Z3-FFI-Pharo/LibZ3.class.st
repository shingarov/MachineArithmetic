"
FFI interface to libz3.so
"
Class {
	#name : #LibZ3,
	#superclass : #FFILibrary,
	#classVars : [
		'LibraryName'
	],
	#category : #'Z3-FFI-Pharo'
}

{ #category : #accessing }
LibZ3 class >> libraryName: aString [
    "Set name / path to Z3 dynamic library to use. Use this to
     use custom Z3 library."

    LibraryName := aString

    "
    self libraryName.
    LibraryName := nil.
    LibraryName := '../../z3/build/libz3.so.4.8' asFileReference absolutePath pathString.
    LibraryName := '../../z3/build/libz3.so.4.8.7.0' asFileReference absolutePath pathString.
    "
]

{ #category : #'API - private' }
LibZ3 >> _add_const_interp: c _: m _: f _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_add_const_interp(Z3_context c, Z3_model m, Z3_func_decl f, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_add_const_interp ( Z3Context c, Z3Model m, Z3FuncDecl f, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _add_func_interp: c _: m _: f _: default_value [
	"
		PRIVATE - DO NOT USE!

		Z3_func_interp Z3_API Z3_add_func_interp(Z3_context c, Z3_model m, Z3_func_decl f, Z3_ast default_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _add_rec_def: c _: f _: n _: args _: body [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_add_rec_def(Z3_context c, Z3_func_decl f, unsigned n, Z3_ast args[], Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_add_rec_def ( Z3Context c, Z3FuncDecl f, uint n, FFIExternalArray args, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_add: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_add(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_add ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_div: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_div(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_div ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_eq: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_eq(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_eq ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_eval: c _: p _: n _: a [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_algebraic_eval(Z3_context c, Z3_ast p, unsigned n, Z3_ast a[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_algebraic_eval ( Z3Context c, Z3AST p, uint n, FFIExternalArray a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_ge: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_ge(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_ge ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_get_i: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_algebraic_get_i(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_algebraic_get_i ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_get_poly: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_algebraic_get_poly(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_algebraic_get_poly ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_gt: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_gt(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_gt ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_is_neg: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_is_neg(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_is_neg ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_is_pos: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_is_pos(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_is_pos ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_is_value: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_is_value(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_is_value ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_is_zero: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_is_zero(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_is_zero ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_le: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_le(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_le ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_lt: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_lt(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_lt ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_mul: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_mul(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_mul ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_neq: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_algebraic_neq(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_algebraic_neq ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_power: c _: a _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_power(Z3_context c, Z3_ast a, unsigned k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_power ( Z3Context c, Z3AST a, uint k ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_root: c _: a _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_root(Z3_context c, Z3_ast a, unsigned k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_root ( Z3Context c, Z3AST a, uint k ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_roots: c _: p _: n _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_algebraic_roots(Z3_context c, Z3_ast p, unsigned n, Z3_ast a[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_algebraic_roots ( Z3Context c, Z3AST p, uint n, FFIExternalArray a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_sign: c _: a [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_algebraic_sign(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_algebraic_sign ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _algebraic_sub: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_algebraic_sub(Z3_context c, Z3_ast a, Z3_ast b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_algebraic_sub ( Z3Context c, Z3AST a, Z3AST b ) )

]

{ #category : #'API - private' }
LibZ3 >> _app_to_ast: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_app_to_ast(Z3_context c, Z3_app a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_app_to_ast ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _apply_result_dec_ref: c _: r [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_apply_result_dec_ref(Z3_context c, Z3_apply_result r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _apply_result_get_num_subgoals: c _: r [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_apply_result_get_num_subgoals(Z3_context c, Z3_apply_result r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _apply_result_get_subgoal: c _: r _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_goal Z3_API Z3_apply_result_get_subgoal(Z3_context c, Z3_apply_result r, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _apply_result_inc_ref: c _: r [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_apply_result_inc_ref(Z3_context c, Z3_apply_result r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _apply_result_to_string: c _: r [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_apply_result_to_string(Z3_context c, Z3_apply_result r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_contains: c _: m _: k [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_ast_map_contains(Z3_context c, Z3_ast_map m, Z3_ast k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_dec_ref: c _: m [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_map_dec_ref(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_erase: c _: m _: k [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_map_erase(Z3_context c, Z3_ast_map m, Z3_ast k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_find: c _: m _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_ast_map_find(Z3_context c, Z3_ast_map m, Z3_ast k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_inc_ref: c _: m [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_map_inc_ref(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_insert: c _: m _: k _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_map_insert(Z3_context c, Z3_ast_map m, Z3_ast k, Z3_ast v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_keys: c _: m [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_ast_map_keys(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_reset: c _: m [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_map_reset(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_size: c _: m [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_ast_map_size(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_map_to_string: c _: m [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_ast_map_to_string(Z3_context c, Z3_ast_map m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _ast_to_string: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_ast_to_string(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_ast_to_string ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_dec_ref: c _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_vector_dec_ref(Z3_context c, Z3_ast_vector v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_ast_vector_dec_ref ( Z3Context c, Z3ASTVector v ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_get: c _: v _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_ast_vector_get(Z3_context c, Z3_ast_vector v, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_ast_vector_get ( Z3Context c, Z3ASTVector v, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_inc_ref: c _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_vector_inc_ref(Z3_context c, Z3_ast_vector v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_ast_vector_inc_ref ( Z3Context c, Z3ASTVector v ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_push: c _: v _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_vector_push(Z3_context c, Z3_ast_vector v, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_ast_vector_push ( Z3Context c, Z3ASTVector v, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_resize: c _: v _: n [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_vector_resize(Z3_context c, Z3_ast_vector v, unsigned n);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_ast_vector_resize ( Z3Context c, Z3ASTVector v, uint n ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_set: c _: v _: i _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_ast_vector_set(Z3_context c, Z3_ast_vector v, unsigned i, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_ast_vector_set ( Z3Context c, Z3ASTVector v, uint i, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_size: c _: v [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_ast_vector_size(Z3_context c, Z3_ast_vector v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_ast_vector_size ( Z3Context c, Z3ASTVector v ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_to_string: c _: v [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_ast_vector_to_string(Z3_context c, Z3_ast_vector v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_ast_vector_to_string ( Z3Context c, Z3ASTVector v ) )

]

{ #category : #'API - private' }
LibZ3 >> _ast_vector_translate: s _: v _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_ast_vector_translate(Z3_context s, Z3_ast_vector v, Z3_context t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_ast_vector_translate ( Z3Context s, Z3ASTVector v, Z3Context t ) )

]

{ #category : #'API - private' }
LibZ3 >> _benchmark_to_smtlib_string: c _: name _: logic _: status _: attributes _: num_assumptions _: assumptions _: formula [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_benchmark_to_smtlib_string(Z3_context c,
												   Z3_string name,
												   Z3_string logic,
												   Z3_string status,
												   Z3_string attributes,
												   unsigned num_assumptions,
												   Z3_ast const assumptions[],
												   Z3_ast formula);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_benchmark_to_smtlib_string ( Z3Context c, char * name, char * logic, char * status, char * attributes, uint num_assumptions, FFIExternalArray assumptions, Z3AST formula ) )

]

{ #category : #'API - private' }
LibZ3 >> _constructor_num_fields: c _: constr [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_constructor_num_fields(Z3_context c, Z3_constructor constr);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_constructor_num_fields ( Z3Context c, Z3Constructor constr ) )

]

{ #category : #'API - private' }
LibZ3 >> _datatype_update_field: c _: field_access _: t _: value [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_datatype_update_field(Z3_context c, Z3_func_decl field_access,
										   Z3_ast t, Z3_ast value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_datatype_update_field ( Z3Context c, Z3FuncDecl field_access, Z3AST t, Z3AST value ) )

]

{ #category : #'API - private' }
LibZ3 >> _dec_ref: c _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_dec_ref(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_dec_ref ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _del_config: c [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_del_config(Z3_config c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_del_config ( Z3Config c ) )

]

{ #category : #'API - private' }
LibZ3 >> _del_constructor: c _: constr [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_del_constructor(Z3_context c, Z3_constructor constr);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_del_constructor ( Z3Context c, Z3Constructor constr ) )

]

{ #category : #'API - private' }
LibZ3 >> _del_constructor_list: c _: clist [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_del_constructor_list(Z3_context c, Z3_constructor_list clist);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_del_constructor_list ( Z3Context c, Z3ConstructorList clist ) )

]

{ #category : #'API - private' }
LibZ3 >> _del_context: c [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_del_context(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_del_context ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _disable_trace: tag [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_disable_trace(Z3_string tag);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_disable_trace ( char * tag ) )

]

{ #category : #'API - private' }
LibZ3 >> _enable_concurrent_dec_ref: c [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_enable_concurrent_dec_ref(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_enable_concurrent_dec_ref ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _enable_trace: tag [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_enable_trace(Z3_string tag);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_enable_trace ( char * tag ) )

]

{ #category : #'API - private' }
LibZ3 >> _eval_smtlib2_string: c _: str [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_eval_smtlib2_string(Z3_context c, Z3_string str);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_eval_smtlib2_string ( Z3Context c, char * str ) )

]

{ #category : #'API - private' }
LibZ3 >> _finalize_memory [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_finalize_memory(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_finalize_memory ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_add_cover: c _: d _: level _: pred _: property [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_add_cover(Z3_context c, Z3_fixedpoint d, int level, Z3_func_decl pred, Z3_ast property);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_add_cover ( Z3Context c, Z3Fixedpoint d, int level, Z3FuncDecl pred, Z3AST property ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_add_fact: c _: d _: r _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_add_fact(Z3_context c, Z3_fixedpoint d,
									   Z3_func_decl r,
									   unsigned num_args, unsigned args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_add_fact ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl r, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_add_invariant: c _: d _: pred _: property [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_add_invariant(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred, Z3_ast property);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_add_invariant ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl pred, Z3AST property ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_add_rule: c _: d _: rule _: name [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_add_rule(Z3_context c, Z3_fixedpoint d, Z3_ast rule, Z3_symbol name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_add_rule ( Z3Context c, Z3Fixedpoint d, Z3AST rule, Z3Symbol name ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_assert: c _: d _: axiom [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_assert(Z3_context c, Z3_fixedpoint d, Z3_ast axiom);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_assert ( Z3Context c, Z3Fixedpoint d, Z3AST axiom ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_dec_ref: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_dec_ref(Z3_context c, Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_dec_ref ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_from_file: c _: f _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_fixedpoint_from_file(Z3_context c,
												 Z3_fixedpoint f,
												 Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_fixedpoint_from_file ( Z3Context c, Z3Fixedpoint f, char * s ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_from_string: c _: f _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_fixedpoint_from_string(Z3_context c,
												   Z3_fixedpoint f,
												   Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_fixedpoint_from_string ( Z3Context c, Z3Fixedpoint f, char * s ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_answer: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fixedpoint_get_answer(Z3_context c, Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fixedpoint_get_answer ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_assertions: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_fixedpoint_get_assertions(
		Z3_context c,
		Z3_fixedpoint f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_fixedpoint_get_assertions ( Z3Context c, Z3Fixedpoint f ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_cover_delta: c _: d _: level _: pred [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fixedpoint_get_cover_delta(Z3_context c, Z3_fixedpoint d, int level, Z3_func_decl pred);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fixedpoint_get_cover_delta ( Z3Context c, Z3Fixedpoint d, int level, Z3FuncDecl pred ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_ground_sat_answer: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fixedpoint_get_ground_sat_answer(Z3_context c,Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fixedpoint_get_ground_sat_answer ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_help: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_fixedpoint_get_help(Z3_context c, Z3_fixedpoint f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_fixedpoint_get_help ( Z3Context c, Z3Fixedpoint f ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_num_levels: c _: d _: pred [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_fixedpoint_get_num_levels(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_fixedpoint_get_num_levels ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl pred ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_param_descrs: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_fixedpoint_get_param_descrs(Z3_context c, Z3_fixedpoint f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ParameterDescriptionSet Z3_fixedpoint_get_param_descrs ( Z3Context c, Z3Fixedpoint f ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_reachable: c _: d _: pred [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fixedpoint_get_reachable(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fixedpoint_get_reachable ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl pred ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_reason_unknown: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_fixedpoint_get_reason_unknown(Z3_context c, Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_fixedpoint_get_reason_unknown ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_rule_names_along_trace: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_fixedpoint_get_rule_names_along_trace(Z3_context c,Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_fixedpoint_get_rule_names_along_trace ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_rules: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_fixedpoint_get_rules(
		Z3_context c,
		Z3_fixedpoint f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_fixedpoint_get_rules ( Z3Context c, Z3Fixedpoint f ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_rules_along_trace: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_fixedpoint_get_rules_along_trace(Z3_context c,Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_fixedpoint_get_rules_along_trace ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_get_statistics: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_stats Z3_API Z3_fixedpoint_get_statistics(Z3_context c, Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_inc_ref: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_inc_ref(Z3_context c, Z3_fixedpoint d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_inc_ref ( Z3Context c, Z3Fixedpoint d ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_query: c _: d _: query [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_fixedpoint_query(Z3_context c, Z3_fixedpoint d, Z3_ast query);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_fixedpoint_query ( Z3Context c, Z3Fixedpoint d, Z3AST query ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_query_from_lvl: c _: d _: query _: lvl [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_fixedpoint_query_from_lvl (Z3_context c,Z3_fixedpoint d, Z3_ast query, unsigned lvl);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_fixedpoint_query_from_lvl ( Z3Context c, Z3Fixedpoint d, Z3AST query, uint lvl ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_query_relations: c _: d _: num_relations _: relations [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_fixedpoint_query_relations(
		Z3_context c, Z3_fixedpoint d,
		unsigned num_relations, Z3_func_decl const relations[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_fixedpoint_query_relations ( Z3Context c, Z3Fixedpoint d, uint num_relations, FFIExternalArray relations ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_register_relation: c _: d _: f [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_register_relation(Z3_context c, Z3_fixedpoint d, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_register_relation ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl f ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_set_params: c _: f _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_set_params(Z3_context c, Z3_fixedpoint f, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_set_params ( Z3Context c, Z3Fixedpoint f, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_set_predicate_representation: c _: d _: f _: num_relations _: relation_kinds [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_set_predicate_representation(
		Z3_context c,
		Z3_fixedpoint d,
		Z3_func_decl f,
		unsigned num_relations,
		Z3_symbol const relation_kinds[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_set_predicate_representation ( Z3Context c, Z3Fixedpoint d, Z3FuncDecl f, uint num_relations, FFIExternalArray relation_kinds ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_to_string: c _: f _: num_queries _: queries [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_fixedpoint_to_string(
		Z3_context c,
		Z3_fixedpoint f,
		unsigned num_queries,
		Z3_ast queries[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_fixedpoint_to_string ( Z3Context c, Z3Fixedpoint f, uint num_queries, FFIExternalArray queries ) )

]

{ #category : #'API - private' }
LibZ3 >> _fixedpoint_update_rule: c _: d _: a _: name [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_fixedpoint_update_rule(Z3_context c, Z3_fixedpoint d, Z3_ast a, Z3_symbol name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_fixedpoint_update_rule ( Z3Context c, Z3Fixedpoint d, Z3AST a, Z3Symbol name ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_ebits: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_fpa_get_ebits(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_fpa_get_ebits ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_exponent_bv: c _: t _: biased [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fpa_get_numeral_exponent_bv(Z3_context c, Z3_ast t, bool biased);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fpa_get_numeral_exponent_bv ( Z3Context c, Z3AST t, bool biased ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_exponent_int64: c _: t _: n _: biased [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_get_numeral_exponent_int64(Z3_context c, Z3_ast t, int64_t * n, bool biased);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_get_numeral_exponent_int64 ( Z3Context c, Z3AST t, FFIExternalArray n, bool biased ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_exponent_string: c _: t _: biased [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_fpa_get_numeral_exponent_string(Z3_context c, Z3_ast t, bool biased);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_fpa_get_numeral_exponent_string ( Z3Context c, Z3AST t, bool biased ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_sign: c _: t _: sgn [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_get_numeral_sign(Z3_context c, Z3_ast t, int * sgn);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_get_numeral_sign ( Z3Context c, Z3AST t, FFIExternalArray sgn ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_sign_bv: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fpa_get_numeral_sign_bv(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fpa_get_numeral_sign_bv ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_significand_bv: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_fpa_get_numeral_significand_bv(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_fpa_get_numeral_significand_bv ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_significand_string: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_fpa_get_numeral_significand_string(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_fpa_get_numeral_significand_string ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_numeral_significand_uint64: c _: t _: n [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_get_numeral_significand_uint64(Z3_context c, Z3_ast t, uint64_t * n);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_get_numeral_significand_uint64 ( Z3Context c, Z3AST t, FFIExternalArray n ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_get_sbits: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_fpa_get_sbits(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_fpa_get_sbits ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_inf: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_inf(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_inf ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_nan: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_nan(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_nan ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_negative: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_negative(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_negative ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_normal: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_normal(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_normal ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_positive: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_positive(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_positive ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_subnormal: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_subnormal(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_subnormal ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _fpa_is_numeral_zero: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_fpa_is_numeral_zero(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_fpa_is_numeral_zero ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _func_decl_to_ast: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_func_decl_to_ast(Z3_context c, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_func_decl_to_ast ( Z3Context c, Z3FuncDecl f ) )

]

{ #category : #'API - private' }
LibZ3 >> _func_decl_to_string: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_func_decl_to_string(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_func_decl_to_string ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _func_entry_dec_ref: c _: e [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_entry_dec_ref(Z3_context c, Z3_func_entry e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_entry_get_arg: c _: e _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_func_entry_get_arg(Z3_context c, Z3_func_entry e, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_entry_get_num_args: c _: e [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_func_entry_get_num_args(Z3_context c, Z3_func_entry e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_entry_get_value: c _: e [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_func_entry_get_value(Z3_context c, Z3_func_entry e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_entry_inc_ref: c _: e [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_entry_inc_ref(Z3_context c, Z3_func_entry e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_add_entry: c _: fi _: args _: value [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_interp_add_entry(Z3_context c, Z3_func_interp fi, Z3_ast_vector args, Z3_ast value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_dec_ref: c _: f [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_interp_dec_ref(Z3_context c, Z3_func_interp f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_get_arity: c _: f [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_func_interp_get_arity(Z3_context c, Z3_func_interp f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_get_else: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_func_interp_get_else(Z3_context c, Z3_func_interp f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_get_entry: c _: f _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_func_entry Z3_API Z3_func_interp_get_entry(Z3_context c, Z3_func_interp f, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_ENTRY not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_get_num_entries: c _: f [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_func_interp_get_num_entries(Z3_context c, Z3_func_interp f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_inc_ref: c _: f [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_interp_inc_ref(Z3_context c, Z3_func_interp f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _func_interp_set_else: c _: f _: else_value [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_func_interp_set_else(Z3_context c, Z3_func_interp f, Z3_ast else_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _get_algebraic_number_lower: c _: a _: precision [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_algebraic_number_lower(Z3_context c, Z3_ast a, unsigned precision);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_algebraic_number_lower ( Z3Context c, Z3AST a, uint precision ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_algebraic_number_upper: c _: a _: precision [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_algebraic_number_upper(Z3_context c, Z3_ast a, unsigned precision);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_algebraic_number_upper ( Z3Context c, Z3AST a, uint precision ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_app_arg: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_app_arg(Z3_context c, Z3_app a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_app_arg ( Z3Context c, Z3AST a, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_app_decl: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_app_decl(Z3_context c, Z3_app a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_app_decl ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_app_num_args: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_app_num_args(Z3_context c, Z3_app a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_app_num_args ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_arity: c _: d [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_arity(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_arity ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_array_sort_domain: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_array_sort_domain(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_array_sort_domain ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_array_sort_domain_n: c _: t _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_array_sort_domain_n(Z3_context c, Z3_sort t, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_array_sort_domain_n ( Z3Context c, Z3Sort t, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_array_sort_range: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_array_sort_range(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_array_sort_range ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_as_array_func_decl: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_as_array_func_decl(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_as_array_func_decl ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_ast_hash: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_ast_hash(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_ast_hash ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_ast_id: c _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_ast_id(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_ast_id ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_ast_kind: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_kind Z3_API Z3_get_ast_kind(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	"
	In Pharo, one has to type parameter as raw pointer (void*) if one
	wants to pass in (raw) handle.

	We do this in three cases (Z3_get_ast_kind(), Z3_get_sort() and Z3_get_sort_kind()) in order to
	get kind/sort information before instantiating the the class. So, we have
	to manually force void* for parameter type.

	See implementations of #fromExternalAddress:inContext: .
	"
	^ self ffiCall: #( uint Z3_get_ast_kind ( Z3Context c, void * a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_bool_value: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_get_bool_value(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_get_bool_value ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_bv_sort_size: c _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_bv_sort_size(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_bv_sort_size ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_datatype_sort_constructor: c _: t _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_datatype_sort_constructor(
		Z3_context c, Z3_sort t, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_datatype_sort_constructor ( Z3Context c, Z3Sort t, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_datatype_sort_constructor_accessor: c _: t _: idx_c _: idx_a [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_datatype_sort_constructor_accessor(Z3_context c,
																  Z3_sort t,
																  unsigned idx_c,
																  unsigned idx_a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_datatype_sort_constructor_accessor ( Z3Context c, Z3Sort t, uint idx_c, uint idx_a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_datatype_sort_num_constructors: c _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_datatype_sort_num_constructors(
		Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_datatype_sort_num_constructors ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_datatype_sort_recognizer: c _: t _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_datatype_sort_recognizer(
		Z3_context c, Z3_sort t, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_datatype_sort_recognizer ( Z3Context c, Z3Sort t, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_ast_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_decl_ast_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_decl_ast_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_double_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		double Z3_API Z3_get_decl_double_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( double Z3_get_decl_double_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_func_decl_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_decl_func_decl_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_decl_func_decl_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_int_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_get_decl_int_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_get_decl_int_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_kind: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_decl_kind Z3_API Z3_get_decl_kind(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_decl_kind ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_name: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_decl_name(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_decl_name ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_num_parameters: c _: d [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_decl_num_parameters(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_decl_num_parameters ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_parameter_kind: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_parameter_kind Z3_API Z3_get_decl_parameter_kind(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_decl_parameter_kind ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_rational_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_decl_rational_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_decl_rational_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_sort_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_decl_sort_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_decl_sort_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_decl_symbol_parameter: c _: d _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_decl_symbol_parameter(Z3_context c, Z3_func_decl d, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_decl_symbol_parameter ( Z3Context c, Z3FuncDecl d, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_denominator: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_denominator(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_denominator ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_domain: c _: d _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_domain(Z3_context c, Z3_func_decl d, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_domain ( Z3Context c, Z3FuncDecl d, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_domain_size: c _: d [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_domain_size(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_domain_size ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_error_code: c [
	"
		PRIVATE - DO NOT USE!

		Z3_error_code Z3_API Z3_get_error_code(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_error_code ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_error_msg: c _: err [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_error_msg(Z3_context c, Z3_error_code err);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_error_msg ( Z3Context c, uint err ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_estimated_alloc_size [
	"
		PRIVATE - DO NOT USE!

		uint64_t Z3_API Z3_get_estimated_alloc_size(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint64 Z3_get_estimated_alloc_size ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_finite_domain_sort_size: c _: s _: r [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_finite_domain_sort_size(Z3_context c, Z3_sort s, uint64_t* r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_finite_domain_sort_size ( Z3Context c, Z3Sort s, FFIExternalArray r ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_full_version [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_full_version(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_full_version ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_func_decl_id: c _: f [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_func_decl_id(Z3_context c, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_func_decl_id ( Z3Context c, Z3FuncDecl f ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_global_param_descrs: c [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_get_global_param_descrs(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ParameterDescriptionSet Z3_get_global_param_descrs ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_implied_equalities: c _: s _: num_terms _: terms _: class_ids [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_get_implied_equalities(Z3_context c,
											  Z3_solver  s,
											  unsigned num_terms,
											  Z3_ast const terms[],
											  unsigned class_ids[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_get_implied_equalities ( Z3Context c, Z3Solver s, uint num_terms, FFIExternalArray terms, FFIExternalArray class_ids ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_index_value: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_index_value(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_index_value ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_lstring: c _: s _: length [
	"
		PRIVATE - DO NOT USE!

		Z3_char_ptr Z3_API Z3_get_lstring(Z3_context c, Z3_ast s, unsigned* length);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_lstring ( Z3Context c, Z3AST s, FFIExternalArray length ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_num_probes: c [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_num_probes(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_num_probes ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_num_simplifiers: c [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_num_simplifiers(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_num_simplifiers ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_num_tactics: c [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_num_tactics(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_num_tactics ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_binary_string: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_numeral_binary_string(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_numeral_binary_string ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_decimal_string: c _: a _: precision [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_numeral_decimal_string(Z3_context c, Z3_ast a, unsigned precision);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_numeral_decimal_string ( Z3Context c, Z3AST a, uint precision ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_double: c _: a [
	"
		PRIVATE - DO NOT USE!

		double Z3_API Z3_get_numeral_double(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( double Z3_get_numeral_double ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_int64: c _: v _: i [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_int64(Z3_context c, Z3_ast v, int64_t* i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_int64 ( Z3Context c, Z3AST v, FFIExternalArray i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_int: c _: v _: i [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_int(Z3_context c, Z3_ast v, int* i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_int ( Z3Context c, Z3AST v, FFIExternalArray i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_rational_int64: c _: v _: num _: den [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_rational_int64(Z3_context c, Z3_ast v, int64_t* num, int64_t* den);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_rational_int64 ( Z3Context c, Z3AST v, FFIExternalArray num, FFIExternalArray den ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_small: c _: a _: num _: den [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_small(Z3_context c, Z3_ast a, int64_t* num, int64_t* den);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_small ( Z3Context c, Z3AST a, FFIExternalArray num, FFIExternalArray den ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_string: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_numeral_string(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_numeral_string ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_uint64: c _: v _: u [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_uint64(Z3_context c, Z3_ast v, uint64_t* u);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_uint64 ( Z3Context c, Z3AST v, FFIExternalArray u ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numeral_uint: c _: v _: u [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_get_numeral_uint(Z3_context c, Z3_ast v, unsigned* u);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_get_numeral_uint ( Z3Context c, Z3AST v, FFIExternalArray u ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_numerator: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_numerator(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_numerator ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_pattern: c _: p _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_pattern(Z3_context c, Z3_pattern p, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_pattern ( Z3Context c, Z3Pattern p, uint idx ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_pattern_num_terms: c _: p [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_pattern_num_terms(Z3_context c, Z3_pattern p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_pattern_num_terms ( Z3Context c, Z3Pattern p ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_probe_name: c _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_probe_name(Z3_context c, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_probe_name ( Z3Context c, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_body: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_quantifier_body(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_quantifier_body ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_bound_name: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_quantifier_bound_name(Z3_context c, Z3_ast a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_quantifier_bound_name ( Z3Context c, Z3AST a, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_bound_sort: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_quantifier_bound_sort(Z3_context c, Z3_ast a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_quantifier_bound_sort ( Z3Context c, Z3AST a, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_id: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_quantifier_id(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_quantifier_id ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_no_pattern_ast: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_get_quantifier_no_pattern_ast(Z3_context c, Z3_ast a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_get_quantifier_no_pattern_ast ( Z3Context c, Z3AST a, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_num_bound: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_quantifier_num_bound(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_quantifier_num_bound ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_num_no_patterns: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_quantifier_num_no_patterns(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_quantifier_num_no_patterns ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_num_patterns: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_quantifier_num_patterns(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_quantifier_num_patterns ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_pattern_ast: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_pattern Z3_API Z3_get_quantifier_pattern_ast(Z3_context c, Z3_ast a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Pattern Z3_get_quantifier_pattern_ast ( Z3Context c, Z3AST a, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_skolem_id: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_quantifier_skolem_id(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_quantifier_skolem_id ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_quantifier_weight: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_quantifier_weight(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_quantifier_weight ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_range: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_range(Z3_context c, Z3_func_decl d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_range ( Z3Context c, Z3FuncDecl d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_re_sort_basis: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_re_sort_basis(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_re_sort_basis ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_relation_arity: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_relation_arity(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_relation_arity ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_relation_column: c _: s _: col [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_relation_column(Z3_context c, Z3_sort s, unsigned col);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_relation_column ( Z3Context c, Z3Sort s, uint col ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_seq_sort_basis: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_seq_sort_basis(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_get_seq_sort_basis ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_simplifier_name: c _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_simplifier_name(Z3_context c, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_simplifier_name ( Z3Context c, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_sort: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_get_sort(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	"
	In Pharo, one has to type parameter as raw pointer (void*) if one
	wants to pass in (raw) handle.

	We do this in three cases (Z3_get_ast_kind(), Z3_get_sort() and Z3_get_sort_kind()) in order to
	get kind/sort information before instantiating the the class. So, we have
	to manually force void* for parameter type.

	See implementations of #fromExternalAddress:inContext: .
	"
	^ self ffiCall: #( Z3Sort Z3_get_sort ( Z3Context c, void * a ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_sort_id: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_sort_id(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_sort_id ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_sort_kind: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_sort_kind Z3_API Z3_get_sort_kind(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	"
	In Pharo, one has to type parameter as raw pointer (void*) if one
	wants to pass in (raw) handle.

	We do this in three cases (Z3_get_ast_kind(), Z3_get_sort() and Z3_get_sort_kind()) in order to
	get kind/sort information before instantiating the the class. So, we have
	to manually force void* for parameter type.

	See implementations of #fromExternalAddress:inContext: .
	"
	^ self ffiCall: #( uint Z3_get_sort_kind ( Z3Context c, void * t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_sort_name: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_get_sort_name(Z3_context c, Z3_sort d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_get_sort_name ( Z3Context c, Z3Sort d ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_string(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_string ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_string_contents: c _: s _: length _: contents [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_get_string_contents(Z3_context c, Z3_ast s, unsigned length, unsigned contents[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_get_string_contents ( Z3Context c, Z3AST s, uint length, FFIExternalArray contents ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_string_length: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_string_length(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_string_length ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_symbol_int: c _: s [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_get_symbol_int(Z3_context c, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_get_symbol_int ( Z3Context c, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_symbol_kind: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol_kind Z3_API Z3_get_symbol_kind(Z3_context c, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_symbol_kind ( Z3Context c, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_symbol_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_symbol_string(Z3_context c, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_symbol_string ( Z3Context c, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_tactic_name: c _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_get_tactic_name(Z3_context c, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_get_tactic_name ( Z3Context c, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_tuple_sort_field_decl: c _: t _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_tuple_sort_field_decl(Z3_context c, Z3_sort t, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_tuple_sort_field_decl ( Z3Context c, Z3Sort t, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_tuple_sort_mk_decl: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_get_tuple_sort_mk_decl(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_get_tuple_sort_mk_decl ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_tuple_sort_num_fields: c _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_get_tuple_sort_num_fields(Z3_context c, Z3_sort t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_get_tuple_sort_num_fields ( Z3Context c, Z3Sort t ) )

]

{ #category : #'API - private' }
LibZ3 >> _get_version: major _: minor _: build_number _: revision_number [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_get_version(unsigned * major, unsigned * minor, unsigned * build_number, unsigned * revision_number);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_get_version ( FFIExternalArray major, FFIExternalArray minor, FFIExternalArray build_number, FFIExternalArray revision_number ) )

]

{ #category : #'API - private' }
LibZ3 >> _global_param_get: param_id _: param_value [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_global_param_get(Z3_string param_id, Z3_string_ptr param_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_global_param_get ( char * param_id, FFIExternalArray param_value ) )

]

{ #category : #'API - private' }
LibZ3 >> _global_param_reset_all [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_global_param_reset_all(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_global_param_reset_all ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _global_param_set: param_id _: param_value [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_global_param_set(Z3_string param_id, Z3_string param_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_global_param_set ( char * param_id, char * param_value ) )

]

{ #category : #'API - private' }
LibZ3 >> _goal_assert: c _: g _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_goal_assert(Z3_context c, Z3_goal g, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_convert_model: c _: g _: m [
	"
		PRIVATE - DO NOT USE!

		Z3_model Z3_API Z3_goal_convert_model(Z3_context c, Z3_goal g, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_dec_ref: c _: g [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_goal_dec_ref(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_depth: c _: g [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_goal_depth(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_formula: c _: g _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_goal_formula(Z3_context c, Z3_goal g, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_inc_ref: c _: g [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_goal_inc_ref(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_inconsistent: c _: g [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_goal_inconsistent(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_is_decided_sat: c _: g [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_goal_is_decided_sat(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_is_decided_unsat: c _: g [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_goal_is_decided_unsat(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_num_exprs: c _: g [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_goal_num_exprs(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_precision: c _: g [
	"
		PRIVATE - DO NOT USE!

		Z3_goal_prec Z3_API Z3_goal_precision(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_reset: c _: g [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_goal_reset(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_size: c _: g [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_goal_size(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_to_dimacs_string: c _: g _: include_names [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_goal_to_dimacs_string(Z3_context c, Z3_goal g, bool include_names);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_to_string: c _: g [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_goal_to_string(Z3_context c, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _goal_translate: source _: g _: target [
	"
		PRIVATE - DO NOT USE!

		Z3_goal Z3_API Z3_goal_translate(Z3_context source, Z3_goal g, Z3_context target);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _inc_ref: c _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_inc_ref(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_inc_ref ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _interrupt: c [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_interrupt(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_interrupt ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_algebraic_number: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_algebraic_number(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_algebraic_number ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_app: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_app(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_app ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_as_array: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_as_array(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_as_array ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_char_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_char_sort(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_char_sort ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_eq_ast: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_eq_ast(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_eq_ast ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_eq_func_decl: c _: f1 _: f2 [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_eq_func_decl(Z3_context c, Z3_func_decl f1, Z3_func_decl f2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_eq_func_decl ( Z3Context c, Z3FuncDecl f1, Z3FuncDecl f2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_eq_sort: c _: s1 _: s2 [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_eq_sort(Z3_context c, Z3_sort s1, Z3_sort s2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_eq_sort ( Z3Context c, Z3Sort s1, Z3Sort s2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_lambda: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_lambda(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_lambda ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_numeral_ast: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_numeral_ast(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_numeral_ast ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_quantifier_exists: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_quantifier_exists(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_quantifier_exists ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_quantifier_forall: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_quantifier_forall(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_quantifier_forall ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_re_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_re_sort(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_re_sort ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_seq_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_seq_sort(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_seq_sort ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_string(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_string ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_string_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_string_sort(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_string_sort ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _is_well_sorted: c _: t [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_is_well_sorted(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_is_well_sorted ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_add: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_add(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_add ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_and: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_and(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_and ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_app: c _: d _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_app(
		Z3_context c,
		Z3_func_decl d,
		unsigned num_args,
		Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_app ( Z3Context c, Z3FuncDecl d, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_array_default: c _: array [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_array_default(Z3_context c, Z3_ast array);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_array_default ( Z3Context c, Z3AST array ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_array_ext: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_array_ext(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_array_ext ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_array_sort: c _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_array_sort(Z3_context c, Z3_sort domain, Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_array_sort ( Z3Context c, Z3Sort domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_array_sort_n: c _: n _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_array_sort_n(Z3_context c, unsigned n, Z3_sort const * domain, Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_array_sort_n ( Z3Context c, uint n, FFIExternalArray domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_as_array: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_as_array(Z3_context c, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_as_array ( Z3Context c, Z3FuncDecl f ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ast_map: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_map Z3_API Z3_mk_ast_map(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_ast_vector: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_mk_ast_vector(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_mk_ast_vector ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_atleast: c _: num_args _: args _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_atleast(Z3_context c, unsigned num_args,
								Z3_ast const args[], unsigned k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_atleast ( Z3Context c, uint num_args, FFIExternalArray args, uint k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_atmost: c _: num_args _: args _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_atmost(Z3_context c, unsigned num_args,
							   Z3_ast const args[], unsigned k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_atmost ( Z3Context c, uint num_args, FFIExternalArray args, uint k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bit2bool: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bit2bool(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bit2bool ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bool_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_bool_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_bool_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bound: c _: index _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bound(Z3_context c, unsigned index, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bound ( Z3Context c, uint index, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bv2int: c _: t1 _: is_signed [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bv2int(Z3_context c,Z3_ast t1, bool is_signed);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bv2int ( Z3Context c, Z3AST t1, bool is_signed ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bv_numeral: c _: sz _: bits [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bv_numeral(Z3_context c, unsigned sz, bool const* bits);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bv_numeral ( Z3Context c, uint sz, FFIExternalArray bits ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bv_sort: c _: sz [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_bv_sort(Z3_context c, unsigned sz);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_bv_sort ( Z3Context c, uint sz ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvadd: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvadd(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvadd ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvadd_no_overflow: c _: t1 _: t2 _: is_signed [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvadd_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvadd_no_overflow ( Z3Context c, Z3AST t1, Z3AST t2, bool is_signed ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvadd_no_underflow: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvadd_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvadd_no_underflow ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvand: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvand(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvand ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvashr: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvashr(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvashr ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvlshr: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvlshr(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvlshr ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvmul: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvmul(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvmul ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvmul_no_overflow: c _: t1 _: t2 _: is_signed [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvmul_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvmul_no_overflow ( Z3Context c, Z3AST t1, Z3AST t2, bool is_signed ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvmul_no_underflow: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvmul_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvmul_no_underflow ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvnand: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvnand(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvnand ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvneg: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvneg(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvneg ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvneg_no_overflow: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvneg_no_overflow(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvneg_no_overflow ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvnor: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvnor(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvnor ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvnot: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvnot(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvnot ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvor: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvor(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvor ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvredand: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvredand(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvredand ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvredor: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvredor(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvredor ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsdiv: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsdiv(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsdiv ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsdiv_no_overflow: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsdiv_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsdiv_no_overflow ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsge: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsge(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsge ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsgt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsgt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsgt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvshl: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvshl(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvshl ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsle: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsle(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsle ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvslt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvslt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvslt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsmod: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsmod(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsmod ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsrem: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsrem(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsrem ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsub: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsub(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsub ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsub_no_overflow: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsub_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsub_no_overflow ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvsub_no_underflow: c _: t1 _: t2 _: is_signed [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvsub_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvsub_no_underflow ( Z3Context c, Z3AST t1, Z3AST t2, bool is_signed ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvudiv: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvudiv(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvudiv ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvuge: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvuge(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvuge ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvugt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvugt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvugt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvule: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvule(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvule ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvult: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvult(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvult ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvurem: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvurem(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvurem ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvxnor: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvxnor(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvxnor ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_bvxor: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_bvxor(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_bvxor ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char: c _: ch [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char(Z3_context c, unsigned ch);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char ( Z3Context c, uint ch ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_from_bv: c _: bv [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char_from_bv(Z3_context c, Z3_ast bv);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char_from_bv ( Z3Context c, Z3AST bv ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_is_digit: c _: ch [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char_is_digit(Z3_context c, Z3_ast ch);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char_is_digit ( Z3Context c, Z3AST ch ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_le: c _: ch1 _: ch2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char_le(Z3_context c, Z3_ast ch1, Z3_ast ch2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char_le ( Z3Context c, Z3AST ch1, Z3AST ch2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_char_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_char_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_to_bv: c _: ch [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char_to_bv(Z3_context c, Z3_ast ch);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char_to_bv ( Z3Context c, Z3AST ch ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_char_to_int: c _: ch [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_char_to_int(Z3_context c, Z3_ast ch);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_char_to_int ( Z3Context c, Z3AST ch ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_concat: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_concat(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_concat ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_config [
	"
		PRIVATE - DO NOT USE!

		Z3_config Z3_API Z3_mk_config(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Config Z3_mk_config ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_const: c _: s _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_const(Z3_context c, Z3_symbol s, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_const ( Z3Context c, Z3Symbol s, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_const_array: c _: domain _: v [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_const_array(Z3_context c, Z3_sort domain, Z3_ast v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_const_array ( Z3Context c, Z3Sort domain, Z3AST v ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_constructor: c _: name _: recognizer _: num_fields _: field_names _: sorts _: sort_refs [
	"
		PRIVATE - DO NOT USE!

		Z3_constructor Z3_API Z3_mk_constructor(Z3_context c,
											Z3_symbol name,
											Z3_symbol recognizer,
											unsigned num_fields,
											Z3_symbol const field_names[],
											Z3_sort_opt const sorts[],
											unsigned sort_refs[]
											);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Constructor Z3_mk_constructor ( Z3Context c, Z3Symbol name, Z3Symbol recognizer, uint num_fields, FFIExternalArray field_names, FFIExternalArray sorts, FFIExternalArray sort_refs ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_constructor_list: c _: num_constructors _: constructors [
	"
		PRIVATE - DO NOT USE!

		Z3_constructor_list Z3_API Z3_mk_constructor_list(Z3_context c,
													  unsigned num_constructors,
													  Z3_constructor const constructors[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ConstructorList Z3_mk_constructor_list ( Z3Context c, uint num_constructors, FFIExternalArray constructors ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_context: c [
	"
		PRIVATE - DO NOT USE!

		Z3_context Z3_API Z3_mk_context(Z3_config c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Context Z3_mk_context ( Z3Config c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_context_rc: c [
	"
		PRIVATE - DO NOT USE!

		Z3_context Z3_API Z3_mk_context_rc(Z3_config c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Context Z3_mk_context_rc ( Z3Config c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_datatype: c _: name _: num_constructors _: constructors [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_datatype(Z3_context c,
								  Z3_symbol name,
								  unsigned num_constructors,
								  Z3_constructor constructors[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_datatype ( Z3Context c, Z3Symbol name, uint num_constructors, FFIExternalArray constructors ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_datatype_sort: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_datatype_sort(Z3_context c, Z3_symbol name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_datatype_sort ( Z3Context c, Z3Symbol name ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_datatypes: c _: num_sorts _: sort_names _: sorts _: constructor_lists [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_mk_datatypes(Z3_context c,
								unsigned num_sorts,
								Z3_symbol const sort_names[],
								Z3_sort sorts[],
								Z3_constructor_list constructor_lists[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_mk_datatypes ( Z3Context c, uint num_sorts, FFIExternalArray sort_names, FFIExternalArray sorts, FFIExternalArray constructor_lists ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_distinct: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_distinct(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_distinct ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_div: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_div(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_div ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_divides: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_divides(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_divides ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_empty_set: c _: domain [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_empty_set(Z3_context c, Z3_sort domain);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_empty_set ( Z3Context c, Z3Sort domain ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_enumeration_sort: c _: name _: n _: enum_names _: enum_consts _: enum_testers [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_enumeration_sort(Z3_context c,
										  Z3_symbol name,
										  unsigned n,
										  Z3_symbol  const enum_names[],
										  Z3_func_decl enum_consts[],
										  Z3_func_decl enum_testers[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_enumeration_sort ( Z3Context c, Z3Symbol name, uint n, FFIExternalArray enum_names, FFIExternalArray enum_consts, FFIExternalArray enum_testers ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_eq: c _: l _: r [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_eq(Z3_context c, Z3_ast l, Z3_ast r);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_eq ( Z3Context c, Z3AST l, Z3AST r ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_exists: c _: weight _: num_patterns _: patterns _: num_decls _: sorts _: decl_names _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_exists(Z3_context c, unsigned weight,
							   unsigned num_patterns, Z3_pattern const patterns[],
							   unsigned num_decls, Z3_sort const sorts[],
							   Z3_symbol const decl_names[],
							   Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_exists ( Z3Context c, uint weight, uint num_patterns, FFIExternalArray patterns, uint num_decls, FFIExternalArray sorts, FFIExternalArray decl_names, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_exists_const: c _: weight _: num_bound _: bound _: num_patterns _: patterns _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_exists_const(
		Z3_context c,
		unsigned weight,
		unsigned num_bound,
		Z3_app const bound[],
		unsigned num_patterns,
		Z3_pattern const patterns[],
		Z3_ast body
		);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_exists_const ( Z3Context c, uint weight, uint num_bound, FFIExternalArray bound, uint num_patterns, FFIExternalArray patterns, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ext_rotate_left: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_ext_rotate_left(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_ext_rotate_left ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ext_rotate_right: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_ext_rotate_right(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_ext_rotate_right ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_extract: c _: high _: low _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_extract(Z3_context c, unsigned high, unsigned low, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_extract ( Z3Context c, uint high, uint low, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_false: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_false(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_false ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_finite_domain_sort: c _: name _: size [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_finite_domain_sort(Z3_context c, Z3_symbol name, uint64_t size);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_finite_domain_sort ( Z3Context c, Z3Symbol name, uint64 size ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fixedpoint: c [
	"
		PRIVATE - DO NOT USE!

		Z3_fixedpoint Z3_API Z3_mk_fixedpoint(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Fixedpoint Z3_mk_fixedpoint ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_forall: c _: weight _: num_patterns _: patterns _: num_decls _: sorts _: decl_names _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_forall(Z3_context c, unsigned weight,
							   unsigned num_patterns, Z3_pattern const patterns[],
							   unsigned num_decls, Z3_sort const sorts[],
							   Z3_symbol const decl_names[],
							   Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_forall ( Z3Context c, uint weight, uint num_patterns, FFIExternalArray patterns, uint num_decls, FFIExternalArray sorts, FFIExternalArray decl_names, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_forall_const: c _: weight _: num_bound _: bound _: num_patterns _: patterns _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_forall_const(
		Z3_context c,
		unsigned weight,
		unsigned num_bound,
		Z3_app const bound[],
		unsigned num_patterns,
		Z3_pattern const patterns[],
		Z3_ast body
		);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_forall_const ( Z3Context c, uint weight, uint num_bound, FFIExternalArray bound, uint num_patterns, FFIExternalArray patterns, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_abs: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_abs(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_abs ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_add: c _: rm _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_add(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_add ( Z3Context c, Z3AST rm, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_div: c _: rm _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_div(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_div ( Z3Context c, Z3AST rm, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_eq: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_eq(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_eq ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_fma: c _: rm _: t1 _: t2 _: t3 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_fma(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2, Z3_ast t3);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_fma ( Z3Context c, Z3AST rm, Z3AST t1, Z3AST t2, Z3AST t3 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_fp: c _: sgn _: exp _: sig [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_fp(Z3_context c, Z3_ast sgn, Z3_ast exp, Z3_ast sig);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_fp ( Z3Context c, Z3AST sgn, Z3AST exp, Z3AST sig ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_geq: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_geq(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_geq ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_gt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_gt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_gt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_inf: c _: s _: negative [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_inf(Z3_context c, Z3_sort s, bool negative);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_inf ( Z3Context c, Z3Sort s, bool negative ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_infinite: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_infinite(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_infinite ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_nan: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_nan(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_nan ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_negative: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_negative(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_negative ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_normal: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_normal(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_normal ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_positive: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_positive(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_positive ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_subnormal: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_subnormal(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_subnormal ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_is_zero: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_is_zero(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_is_zero ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_leq: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_leq(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_leq ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_lt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_lt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_lt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_max: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_max(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_max ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_min: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_min(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_min ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_mul: c _: rm _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_mul(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_mul ( Z3Context c, Z3AST rm, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_nan: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_nan(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_nan ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_neg: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_neg(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_neg ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_numeral_double: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_numeral_double(Z3_context c, double v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_numeral_double ( Z3Context c, double v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_numeral_float: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_numeral_float(Z3_context c, float v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_numeral_float ( Z3Context c, float v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_numeral_int64_uint64: c _: sgn _: exp _: sig _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_numeral_int64_uint64(Z3_context c, bool sgn, int64_t exp, uint64_t sig, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_numeral_int64_uint64 ( Z3Context c, bool sgn, int64 exp, uint64 sig, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_numeral_int: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_numeral_int(Z3_context c, signed v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_numeral_int ( Z3Context c, int v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_numeral_int_uint: c _: sgn _: exp _: sig _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_numeral_int_uint(Z3_context c, bool sgn, signed exp, unsigned sig, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_numeral_int_uint ( Z3Context c, bool sgn, int exp, uint sig, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rem: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rem(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rem ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rna: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rna(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rna ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rne: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rne(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rne ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_nearest_ties_to_away: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_nearest_ties_to_away(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_nearest_ties_to_away ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_nearest_ties_to_even: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_nearest_ties_to_even(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_nearest_ties_to_even ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_to_integral: c _: rm _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_to_integral(Z3_context c, Z3_ast rm, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_to_integral ( Z3Context c, Z3AST rm, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_toward_negative: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_toward_negative(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_toward_negative ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_toward_positive: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_toward_positive(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_toward_positive ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_round_toward_zero: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_round_toward_zero(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_round_toward_zero ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rounding_mode_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_rounding_mode_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_rounding_mode_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rtn: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rtn(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rtn ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rtp: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rtp(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rtp ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_rtz: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_rtz(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_rtz ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort: c _: ebits _: sbits [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort(Z3_context c, unsigned ebits, unsigned sbits);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort ( Z3Context c, uint ebits, uint sbits ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_128: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_128(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_128 ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_16: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_16(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_16 ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_32: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_32(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_32 ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_64: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_64(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_64 ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_double: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_double(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_double ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_half: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_half(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_half ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_quadruple: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_quadruple(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_quadruple ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sort_single: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_fpa_sort_single(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_fpa_sort_single ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sqrt: c _: rm _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_sqrt(Z3_context c, Z3_ast rm, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_sqrt ( Z3Context c, Z3AST rm, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_sub: c _: rm _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_sub(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_sub ( Z3Context c, Z3AST rm, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_bv: c _: bv _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_bv(Z3_context c, Z3_ast bv, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_bv ( Z3Context c, Z3AST bv, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_float: c _: rm _: t _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_float(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_float ( Z3Context c, Z3AST rm, Z3AST t, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_int_real: c _: rm _: exp _: sig _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_int_real(Z3_context c, Z3_ast rm, Z3_ast exp, Z3_ast sig, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_int_real ( Z3Context c, Z3AST rm, Z3AST exp, Z3AST sig, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_real: c _: rm _: t _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_real(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_real ( Z3Context c, Z3AST rm, Z3AST t, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_signed: c _: rm _: t _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_signed(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_signed ( Z3Context c, Z3AST rm, Z3AST t, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_fp_unsigned: c _: rm _: t _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_fp_unsigned(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_fp_unsigned ( Z3Context c, Z3AST rm, Z3AST t, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_ieee_bv: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_ieee_bv(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_ieee_bv ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_real: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_real(Z3_context c, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_real ( Z3Context c, Z3AST t ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_sbv: c _: rm _: t _: sz [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_sbv(Z3_context c, Z3_ast rm, Z3_ast t, unsigned sz);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_sbv ( Z3Context c, Z3AST rm, Z3AST t, uint sz ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_to_ubv: c _: rm _: t _: sz [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_to_ubv(Z3_context c, Z3_ast rm, Z3_ast t, unsigned sz);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_to_ubv ( Z3Context c, Z3AST rm, Z3AST t, uint sz ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fpa_zero: c _: s _: negative [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fpa_zero(Z3_context c, Z3_sort s, bool negative);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fpa_zero ( Z3Context c, Z3Sort s, bool negative ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fresh_const: c _: prefix _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_fresh_const(Z3_context c, Z3_string prefix, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_fresh_const ( Z3Context c, char * prefix, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_fresh_func_decl: c _: prefix _: domain_size _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_fresh_func_decl(Z3_context c, Z3_string prefix,
												   unsigned domain_size, Z3_sort const domain[],
												   Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_fresh_func_decl ( Z3Context c, char * prefix, uint domain_size, FFIExternalArray domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_full_set: c _: domain [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_full_set(Z3_context c, Z3_sort domain);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_full_set ( Z3Context c, Z3Sort domain ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_func_decl: c _: s _: domain_size _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_func_decl(Z3_context c, Z3_symbol s,
										unsigned domain_size, Z3_sort const domain[],
										Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_func_decl ( Z3Context c, Z3Symbol s, uint domain_size, FFIExternalArray domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ge: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_ge(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_ge ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_goal: c _: models _: unsat_cores _: proofs [
	"
		PRIVATE - DO NOT USE!

		Z3_goal Z3_API Z3_mk_goal(Z3_context c, bool models, bool unsat_cores, bool proofs);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type GOAL not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_gt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_gt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_gt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_iff: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_iff(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_iff ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_implies: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_implies(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_implies ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int2bv: c _: n _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_int2bv(Z3_context c, unsigned n, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_int2bv ( Z3Context c, uint n, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int2real: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_int2real(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_int2real ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int64: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_int64(Z3_context c, int64_t v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_int64 ( Z3Context c, int64 v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_int(Z3_context c, int v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_int ( Z3Context c, int v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_int_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_int_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int_symbol: c _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_mk_int_symbol(Z3_context c, int i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_mk_int_symbol ( Z3Context c, int i ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_int_to_str: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_int_to_str(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_int_to_str ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_is_int: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_is_int(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_is_int ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ite: c _: t1 _: t2 _: t3 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_ite(Z3_context c, Z3_ast t1, Z3_ast t2, Z3_ast t3);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_ite ( Z3Context c, Z3AST t1, Z3AST t2, Z3AST t3 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_lambda: c _: num_decls _: sorts _: decl_names _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_lambda(Z3_context c, 
							   unsigned num_decls, Z3_sort const sorts[],
							   Z3_symbol const decl_names[],
							   Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_lambda ( Z3Context c, uint num_decls, FFIExternalArray sorts, FFIExternalArray decl_names, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_lambda_const: c _: num_bound _: bound _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_lambda_const(Z3_context c, 
									 unsigned num_bound, Z3_app const bound[],
									 Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_lambda_const ( Z3Context c, uint num_bound, FFIExternalArray bound, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_le: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_le(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_le ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_linear_order: c _: a _: id [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_linear_order(Z3_context c, Z3_sort a, unsigned id);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_linear_order ( Z3Context c, Z3Sort a, uint id ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_list_sort: c _: name _: elem_sort _: nil_decl _: is_nil_decl _: cons_decl _: is_cons_decl _: head_decl _: tail_decl [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_list_sort(Z3_context c,
								   Z3_symbol name,
								   Z3_sort   elem_sort,
								   Z3_func_decl* nil_decl,
								   Z3_func_decl* is_nil_decl,
								   Z3_func_decl* cons_decl,
								   Z3_func_decl* is_cons_decl,
								   Z3_func_decl* head_decl,
								   Z3_func_decl* tail_decl
								   );

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_list_sort ( Z3Context c, Z3Symbol name, Z3Sort elem_sort, FFIExternalArray nil_decl, FFIExternalArray is_nil_decl, FFIExternalArray cons_decl, FFIExternalArray is_cons_decl, FFIExternalArray head_decl, FFIExternalArray tail_decl ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_lstring: c _: len _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_lstring(Z3_context c, unsigned len, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_lstring ( Z3Context c, uint len, char * s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_lt: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_lt(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_lt ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_map: c _: f _: n _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_map(Z3_context c, Z3_func_decl f, unsigned n, Z3_ast const* args);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_map ( Z3Context c, Z3FuncDecl f, uint n, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_mod: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_mod(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_mod ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_model: c [
	"
		PRIVATE - DO NOT USE!

		Z3_model Z3_API Z3_mk_model(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Model Z3_mk_model ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_mul: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_mul(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_mul ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_not: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_not(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_not ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_numeral: c _: numeral _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_numeral(Z3_context c, Z3_string numeral, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_numeral ( Z3Context c, char * numeral, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_optimize: c [
	"
		PRIVATE - DO NOT USE!

		Z3_optimize Z3_API Z3_mk_optimize(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_or: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_or(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_or ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_params: c [
	"
		PRIVATE - DO NOT USE!

		Z3_params Z3_API Z3_mk_params(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ParameterSet Z3_mk_params ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_partial_order: c _: a _: id [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_partial_order(Z3_context c, Z3_sort a, unsigned id);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_partial_order ( Z3Context c, Z3Sort a, uint id ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_pattern: c _: num_patterns _: terms [
	"
		PRIVATE - DO NOT USE!

		Z3_pattern Z3_API Z3_mk_pattern(Z3_context c, unsigned num_patterns, Z3_ast const terms[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Pattern Z3_mk_pattern ( Z3Context c, uint num_patterns, FFIExternalArray terms ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_pbeq: c _: num_args _: args _: coeffs _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_pbeq(Z3_context c, unsigned num_args,
							 Z3_ast const args[], int const coeffs[],
							 int k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_pbeq ( Z3Context c, uint num_args, FFIExternalArray args, FFIExternalArray coeffs, int k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_pbge: c _: num_args _: args _: coeffs _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_pbge(Z3_context c, unsigned num_args,
							 Z3_ast const args[], int const coeffs[],
							 int k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_pbge ( Z3Context c, uint num_args, FFIExternalArray args, FFIExternalArray coeffs, int k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_pble: c _: num_args _: args _: coeffs _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_pble(Z3_context c, unsigned num_args,
							 Z3_ast const args[], int const coeffs[],
							 int k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_pble ( Z3Context c, uint num_args, FFIExternalArray args, FFIExternalArray coeffs, int k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_piecewise_linear_order: c _: a _: id [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_piecewise_linear_order(Z3_context c, Z3_sort a, unsigned id);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_piecewise_linear_order ( Z3Context c, Z3Sort a, uint id ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_power: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_power(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_power ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_probe: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_mk_probe(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_quantifier: c _: is_forall _: weight _: num_patterns _: patterns _: num_decls _: sorts _: decl_names _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_quantifier(
		Z3_context c,
		bool is_forall,
		unsigned weight,
		unsigned num_patterns, Z3_pattern const patterns[],
		unsigned num_decls, Z3_sort const sorts[],
		Z3_symbol const decl_names[],
		Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_quantifier ( Z3Context c, bool is_forall, uint weight, uint num_patterns, FFIExternalArray patterns, uint num_decls, FFIExternalArray sorts, FFIExternalArray decl_names, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_quantifier_const: c _: is_forall _: weight _: num_bound _: bound _: num_patterns _: patterns _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_quantifier_const(
		Z3_context c,
		bool is_forall,
		unsigned weight,
		unsigned num_bound,  Z3_app const bound[],
		unsigned num_patterns, Z3_pattern const patterns[],
		Z3_ast body
		);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_quantifier_const ( Z3Context c, bool is_forall, uint weight, uint num_bound, FFIExternalArray bound, uint num_patterns, FFIExternalArray patterns, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_quantifier_const_ex: c _: is_forall _: weight _: quantifier_id _: skolem_id _: num_bound _: bound _: num_patterns _: patterns _: num_no_patterns _: no_patterns _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_quantifier_const_ex(
		Z3_context c,
		bool is_forall,
		unsigned weight,
		Z3_symbol quantifier_id,
		Z3_symbol skolem_id,
		unsigned num_bound,  Z3_app const bound[],
		unsigned num_patterns, Z3_pattern const patterns[],
		unsigned num_no_patterns, Z3_ast const no_patterns[],
		Z3_ast body
		);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_quantifier_const_ex ( Z3Context c, bool is_forall, uint weight, Z3Symbol quantifier_id, Z3Symbol skolem_id, uint num_bound, FFIExternalArray bound, uint num_patterns, FFIExternalArray patterns, uint num_no_patterns, FFIExternalArray no_patterns, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_quantifier_ex: c _: is_forall _: weight _: quantifier_id _: skolem_id _: num_patterns _: patterns _: num_no_patterns _: no_patterns _: num_decls _: sorts _: decl_names _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_quantifier_ex(
		Z3_context c,
		bool is_forall,
		unsigned weight,
		Z3_symbol quantifier_id,
		Z3_symbol skolem_id,
		unsigned num_patterns, Z3_pattern const patterns[],
		unsigned num_no_patterns, Z3_ast const no_patterns[],
		unsigned num_decls, Z3_sort const sorts[],
		Z3_symbol const decl_names[],
		Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_quantifier_ex ( Z3Context c, bool is_forall, uint weight, Z3Symbol quantifier_id, Z3Symbol skolem_id, uint num_patterns, FFIExternalArray patterns, uint num_no_patterns, FFIExternalArray no_patterns, uint num_decls, FFIExternalArray sorts, FFIExternalArray decl_names, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_allchar: c _: regex_sort [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_allchar(Z3_context c, Z3_sort regex_sort);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_allchar ( Z3Context c, Z3Sort regex_sort ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_complement: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_complement(Z3_context c, Z3_ast re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_complement ( Z3Context c, Z3AST re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_concat: c _: n _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_concat(Z3_context c, unsigned n, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_concat ( Z3Context c, uint n, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_diff: c _: re1 _: re2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_diff(Z3_context c, Z3_ast re1, Z3_ast re2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_diff ( Z3Context c, Z3AST re1, Z3AST re2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_empty: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_empty(Z3_context c, Z3_sort re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_empty ( Z3Context c, Z3Sort re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_full: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_full(Z3_context c, Z3_sort re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_full ( Z3Context c, Z3Sort re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_intersect: c _: n _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_intersect(Z3_context c, unsigned n, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_intersect ( Z3Context c, uint n, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_loop: c _: r _: lo _: hi [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_loop(Z3_context c, Z3_ast r, unsigned lo, unsigned hi);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_loop ( Z3Context c, Z3AST r, uint lo, uint hi ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_option: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_option(Z3_context c, Z3_ast re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_option ( Z3Context c, Z3AST re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_plus: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_plus(Z3_context c, Z3_ast re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_plus ( Z3Context c, Z3AST re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_power: c _: re _: n [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_power(Z3_context c, Z3_ast re, unsigned n);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_power ( Z3Context c, Z3AST re, uint n ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_range: c _: lo _: hi [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_range(Z3_context c, Z3_ast lo, Z3_ast hi);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_range ( Z3Context c, Z3AST lo, Z3AST hi ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_sort: c _: seq [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_re_sort(Z3_context c, Z3_sort seq);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_re_sort ( Z3Context c, Z3Sort seq ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_star: c _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_star(Z3_context c, Z3_ast re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_star ( Z3Context c, Z3AST re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_re_union: c _: n _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_re_union(Z3_context c, unsigned n, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_re_union ( Z3Context c, uint n, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_real2int: c _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_real2int(Z3_context c, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_real2int ( Z3Context c, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_real: c _: num _: den [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_real(Z3_context c, int num, int den);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_real ( Z3Context c, int num, int den ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_real_int64: c _: num _: den [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_real_int64(Z3_context c, int64_t num, int64_t den);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_real_int64 ( Z3Context c, int64 num, int64 den ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_real_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_real_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_real_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_rec_func_decl: c _: s _: domain_size _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_rec_func_decl(Z3_context c, Z3_symbol s,
										unsigned domain_size, Z3_sort const domain[],
										Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_rec_func_decl ( Z3Context c, Z3Symbol s, uint domain_size, FFIExternalArray domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_rem: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_rem(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_rem ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_repeat: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_repeat(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_repeat ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_rotate_left: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_rotate_left(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_rotate_left ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_rotate_right: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_rotate_right(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_rotate_right ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_sbv_to_str: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_sbv_to_str(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_sbv_to_str ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_select: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_select(Z3_context c, Z3_ast a, Z3_ast i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_select ( Z3Context c, Z3AST a, Z3AST i ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_select_n: c _: a _: n _: idxs [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_select_n(Z3_context c, Z3_ast a, unsigned n, Z3_ast const* idxs);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_select_n ( Z3Context c, Z3AST a, uint n, FFIExternalArray idxs ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_at: c _: s _: index [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_at(Z3_context c, Z3_ast s, Z3_ast index);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_at ( Z3Context c, Z3AST s, Z3AST index ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_concat: c _: n _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_concat(Z3_context c, unsigned n, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_concat ( Z3Context c, uint n, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_contains: c _: container _: containee [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_contains(Z3_context c, Z3_ast container, Z3_ast containee);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_contains ( Z3Context c, Z3AST container, Z3AST containee ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_empty: c _: seq [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_empty(Z3_context c, Z3_sort seq);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_empty ( Z3Context c, Z3Sort seq ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_extract: c _: s _: offset _: length [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_extract(Z3_context c, Z3_ast s, Z3_ast offset, Z3_ast length);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_extract ( Z3Context c, Z3AST s, Z3AST offset, Z3AST length ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_in_re: c _: seq _: re [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_in_re(Z3_context c, Z3_ast seq, Z3_ast re);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_in_re ( Z3Context c, Z3AST seq, Z3AST re ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_index: c _: s _: substr _: offset [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_index(Z3_context c, Z3_ast s, Z3_ast substr, Z3_ast offset);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_index ( Z3Context c, Z3AST s, Z3AST substr, Z3AST offset ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_last_index: c _: s _: substr [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_last_index(Z3_context c, Z3_ast s, Z3_ast substr);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_last_index ( Z3Context c, Z3AST s, Z3AST substr ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_length: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_length(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_length ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_nth: c _: s _: index [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_nth(Z3_context c, Z3_ast s, Z3_ast index);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_nth ( Z3Context c, Z3AST s, Z3AST index ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_prefix: c _: prefix _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_prefix(Z3_context c, Z3_ast prefix, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_prefix ( Z3Context c, Z3AST prefix, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_replace: c _: s _: src _: dst [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_replace(Z3_context c, Z3_ast s, Z3_ast src, Z3_ast dst);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_replace ( Z3Context c, Z3AST s, Z3AST src, Z3AST dst ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_seq_sort(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_seq_sort ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_suffix: c _: suffix _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_suffix(Z3_context c, Z3_ast suffix, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_suffix ( Z3Context c, Z3AST suffix, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_to_re: c _: seq [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_to_re(Z3_context c, Z3_ast seq);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_to_re ( Z3Context c, Z3AST seq ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_seq_unit: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_seq_unit(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_seq_unit ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_add: c _: set _: elem [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_add(Z3_context c, Z3_ast set, Z3_ast elem);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_add ( Z3Context c, Z3AST set, Z3AST elem ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_complement: c _: arg [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_complement(Z3_context c, Z3_ast arg);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_complement ( Z3Context c, Z3AST arg ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_del: c _: set _: elem [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_del(Z3_context c, Z3_ast set, Z3_ast elem);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_del ( Z3Context c, Z3AST set, Z3AST elem ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_difference: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_difference(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_difference ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_has_size: c _: set _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_has_size(Z3_context c, Z3_ast set, Z3_ast k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_has_size ( Z3Context c, Z3AST set, Z3AST k ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_intersect: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_intersect(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_intersect ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_member: c _: elem _: set [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_member(Z3_context c, Z3_ast elem, Z3_ast set);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_member ( Z3Context c, Z3AST elem, Z3AST set ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_sort: c _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_set_sort(Z3_context c, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_set_sort ( Z3Context c, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_subset: c _: arg1 _: arg2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_subset(Z3_context c, Z3_ast arg1, Z3_ast arg2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_subset ( Z3Context c, Z3AST arg1, Z3AST arg2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_set_union: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_set_union(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_set_union ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_sign_ext: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_sign_ext(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_sign_ext ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_simple_solver: c [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_mk_simple_solver(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Solver Z3_mk_simple_solver ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_simplifier: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_simplifier Z3_API Z3_mk_simplifier(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_solver: c [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_mk_solver(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Solver Z3_mk_solver ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_solver_for_logic: c _: logic [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_mk_solver_for_logic(Z3_context c, Z3_symbol logic);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Solver Z3_mk_solver_for_logic ( Z3Context c, Z3Symbol logic ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_solver_from_tactic: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_mk_solver_from_tactic(Z3_context c, Z3_tactic t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_store: c _: a _: i _: v [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_store(Z3_context c, Z3_ast a, Z3_ast i, Z3_ast v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_store ( Z3Context c, Z3AST a, Z3AST i, Z3AST v ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_store_n: c _: a _: n _: idxs _: v [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_store_n(Z3_context c, Z3_ast a, unsigned n, Z3_ast const* idxs, Z3_ast v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_store_n ( Z3Context c, Z3AST a, uint n, FFIExternalArray idxs, Z3AST v ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_str_le: c _: prefix _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_str_le(Z3_context c, Z3_ast prefix, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_str_le ( Z3Context c, Z3AST prefix, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_str_lt: c _: prefix _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_str_lt(Z3_context c, Z3_ast prefix, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_str_lt ( Z3Context c, Z3AST prefix, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_str_to_int: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_str_to_int(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_str_to_int ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_string(Z3_context c, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_string ( Z3Context c, char * s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_string_from_code: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_string_from_code(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_string_from_code ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_string_sort: c [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_string_sort(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_string_sort ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_string_symbol: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_mk_string_symbol(Z3_context c, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_mk_string_symbol ( Z3Context c, char * s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_string_to_code: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_string_to_code(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_string_to_code ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_sub: c _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_sub(Z3_context c, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_sub ( Z3Context c, uint num_args, FFIExternalArray args ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_tactic: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_mk_tactic(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _mk_transitive_closure: c _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_transitive_closure(Z3_context c, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_transitive_closure ( Z3Context c, Z3FuncDecl f ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_tree_order: c _: a _: id [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_mk_tree_order(Z3_context c, Z3_sort a, unsigned id);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_mk_tree_order ( Z3Context c, Z3Sort a, uint id ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_true: c [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_true(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_true ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_tuple_sort: c _: mk_tuple_name _: num_fields _: field_names _: field_sorts _: mk_tuple_decl _: proj_decl [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_tuple_sort(Z3_context c,
										Z3_symbol mk_tuple_name,
										unsigned num_fields,
										Z3_symbol const field_names[],
										Z3_sort const field_sorts[],
										Z3_func_decl * mk_tuple_decl,
										Z3_func_decl proj_decl[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_tuple_sort ( Z3Context c, Z3Symbol mk_tuple_name, uint num_fields, FFIExternalArray field_names, FFIExternalArray field_sorts, FFIExternalArray mk_tuple_decl, FFIExternalArray proj_decl ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_type_variable: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_type_variable(Z3_context c, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_type_variable ( Z3Context c, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_u32string: c _: len _: chars [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_u32string(Z3_context c, unsigned len, unsigned const chars[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_u32string ( Z3Context c, uint len, FFIExternalArray chars ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_ubv_to_str: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_ubv_to_str(Z3_context c, Z3_ast s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_ubv_to_str ( Z3Context c, Z3AST s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_unary_minus: c _: arg [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_unary_minus(Z3_context c, Z3_ast arg);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_unary_minus ( Z3Context c, Z3AST arg ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_uninterpreted_sort: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_mk_uninterpreted_sort(Z3_context c, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_mk_uninterpreted_sort ( Z3Context c, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_unsigned_int64: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_unsigned_int64(Z3_context c, uint64_t v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_unsigned_int64 ( Z3Context c, uint64 v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_unsigned_int: c _: v _: ty [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_unsigned_int(Z3_context c, unsigned v, Z3_sort ty);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_unsigned_int ( Z3Context c, uint v, Z3Sort ty ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_xor: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_xor(Z3_context c, Z3_ast t1, Z3_ast t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_xor ( Z3Context c, Z3AST t1, Z3AST t2 ) )

]

{ #category : #'API - private' }
LibZ3 >> _mk_zero_ext: c _: i _: t1 [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_mk_zero_ext(Z3_context c, unsigned i, Z3_ast t1);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_mk_zero_ext ( Z3Context c, uint i, Z3AST t1 ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_dec_ref: c _: m [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_model_dec_ref(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_model_dec_ref ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_eval: c _: m _: t _: model_completion _: v [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_model_eval(Z3_context c, Z3_model m, Z3_ast t, bool model_completion, Z3_ast * v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_model_eval ( Z3Context c, Z3Model m, Z3AST t, bool model_completion, FFIExternalArray v ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_extrapolate: c _: m _: fml [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_model_extrapolate
	  (Z3_context c,
	   Z3_model m,
	   Z3_ast fml);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_model_extrapolate ( Z3Context c, Z3Model m, Z3AST fml ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_const_decl: c _: m _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_model_get_const_decl(Z3_context c, Z3_model m, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_model_get_const_decl ( Z3Context c, Z3Model m, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_const_interp: c _: m _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_opt Z3_API Z3_model_get_const_interp(Z3_context c, Z3_model m, Z3_func_decl a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_model_get_const_interp ( Z3Context c, Z3Model m, Z3FuncDecl a ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_func_decl: c _: m _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_model_get_func_decl(Z3_context c, Z3_model m, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_model_get_func_decl ( Z3Context c, Z3Model m, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_func_interp: c _: m _: f [
	"
		PRIVATE - DO NOT USE!

		Z3_func_interp_opt Z3_API Z3_model_get_func_interp(Z3_context c, Z3_model m, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type FUNC_INTERP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _model_get_num_consts: c _: m [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_model_get_num_consts(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_model_get_num_consts ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_num_funcs: c _: m [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_model_get_num_funcs(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_model_get_num_funcs ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_num_sorts: c _: m [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_model_get_num_sorts(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_model_get_num_sorts ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_sort: c _: m _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_sort Z3_API Z3_model_get_sort(Z3_context c, Z3_model m, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Sort Z3_model_get_sort ( Z3Context c, Z3Model m, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_get_sort_universe: c _: m _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_model_get_sort_universe(Z3_context c, Z3_model m, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_model_get_sort_universe ( Z3Context c, Z3Model m, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_has_interp: c _: m _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_model_has_interp(Z3_context c, Z3_model m, Z3_func_decl a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( bool Z3_model_has_interp ( Z3Context c, Z3Model m, Z3FuncDecl a ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_inc_ref: c _: m [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_model_inc_ref(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_model_inc_ref ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_to_string: c _: m [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_model_to_string(Z3_context c, Z3_model m);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_model_to_string ( Z3Context c, Z3Model m ) )

]

{ #category : #'API - private' }
LibZ3 >> _model_translate: c _: m _: dst [
	"
		PRIVATE - DO NOT USE!

		Z3_model Z3_API Z3_model_translate(Z3_context c, Z3_model m, Z3_context dst);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Model Z3_model_translate ( Z3Context c, Z3Model m, Z3Context dst ) )

]

{ #category : #'API - private' }
LibZ3 >> _optimize_assert: c _: o _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_assert(Z3_context c, Z3_optimize o, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_assert_and_track: c _: o _: a _: t [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_assert_and_track(Z3_context c, Z3_optimize o, Z3_ast a, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_assert_soft: c _: o _: a _: weight _: id [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_optimize_assert_soft(Z3_context c, Z3_optimize o, Z3_ast a, Z3_string weight, Z3_symbol id);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_check: c _: o _: num_assumptions _: assumptions [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_optimize_check(Z3_context c, Z3_optimize o, unsigned num_assumptions, Z3_ast const assumptions[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_dec_ref: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_dec_ref(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_from_file: c _: o _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_from_file(Z3_context c, Z3_optimize o, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_from_string: c _: o _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_from_string(Z3_context c, Z3_optimize o, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_assertions: c _: o [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_optimize_get_assertions(Z3_context c, Z3_optimize o);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_help: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_optimize_get_help(Z3_context c, Z3_optimize t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_lower: c _: o _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_optimize_get_lower(Z3_context c, Z3_optimize o, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_lower_as_vector: c _: o _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_optimize_get_lower_as_vector(Z3_context c, Z3_optimize o, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_model: c _: o [
	"
		PRIVATE - DO NOT USE!

		Z3_model Z3_API Z3_optimize_get_model(Z3_context c, Z3_optimize o);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_objectives: c _: o [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_optimize_get_objectives(Z3_context c, Z3_optimize o);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_param_descrs: c _: o [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_optimize_get_param_descrs(Z3_context c, Z3_optimize o);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_reason_unknown: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_optimize_get_reason_unknown(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_statistics: c _: d [
	"
		PRIVATE - DO NOT USE!

		Z3_stats Z3_API Z3_optimize_get_statistics(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_upper: c _: o _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_optimize_get_upper(Z3_context c, Z3_optimize o, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_get_upper_as_vector: c _: o _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_optimize_get_upper_as_vector(Z3_context c, Z3_optimize o, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_inc_ref: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_inc_ref(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_maximize: c _: o _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_optimize_maximize(Z3_context c, Z3_optimize o, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_minimize: c _: o _: t [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_optimize_minimize(Z3_context c, Z3_optimize o, Z3_ast t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_pop: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_pop(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_push: c _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_push(Z3_context c, Z3_optimize d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_set_params: c _: o _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_optimize_set_params(Z3_context c, Z3_optimize o, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _optimize_to_string: c _: o [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_optimize_to_string(Z3_context c, Z3_optimize o);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type OPTIMIZE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_dec_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_param_descrs_dec_ref(Z3_context c, Z3_param_descrs p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_param_descrs_dec_ref ( Z3Context c, Z3ParameterDescriptionSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_get_documentation: c _: p _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_param_descrs_get_documentation(Z3_context c, Z3_param_descrs p, Z3_symbol s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_param_descrs_get_documentation ( Z3Context c, Z3ParameterDescriptionSet p, Z3Symbol s ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_get_kind: c _: p _: n [
	"
		PRIVATE - DO NOT USE!

		Z3_param_kind Z3_API Z3_param_descrs_get_kind(Z3_context c, Z3_param_descrs p, Z3_symbol n);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_param_descrs_get_kind ( Z3Context c, Z3ParameterDescriptionSet p, Z3Symbol n ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_get_name: c _: p _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_param_descrs_get_name(Z3_context c, Z3_param_descrs p, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Symbol Z3_param_descrs_get_name ( Z3Context c, Z3ParameterDescriptionSet p, uint i ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_inc_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_param_descrs_inc_ref(Z3_context c, Z3_param_descrs p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_param_descrs_inc_ref ( Z3Context c, Z3ParameterDescriptionSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_size: c _: p [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_param_descrs_size(Z3_context c, Z3_param_descrs p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_param_descrs_size ( Z3Context c, Z3ParameterDescriptionSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _param_descrs_to_string: c _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_param_descrs_to_string(Z3_context c, Z3_param_descrs p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_param_descrs_to_string ( Z3Context c, Z3ParameterDescriptionSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_dec_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_dec_ref(Z3_context c, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_dec_ref ( Z3Context c, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_inc_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_inc_ref(Z3_context c, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_inc_ref ( Z3Context c, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_set_bool: c _: p _: k _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_set_bool(Z3_context c, Z3_params p, Z3_symbol k, bool v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_set_bool ( Z3Context c, Z3ParameterSet p, Z3Symbol k, bool v ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_set_double: c _: p _: k _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_set_double(Z3_context c, Z3_params p, Z3_symbol k, double v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_set_double ( Z3Context c, Z3ParameterSet p, Z3Symbol k, double v ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_set_symbol: c _: p _: k _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_set_symbol(Z3_context c, Z3_params p, Z3_symbol k, Z3_symbol v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_set_symbol ( Z3Context c, Z3ParameterSet p, Z3Symbol k, Z3Symbol v ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_set_uint: c _: p _: k _: v [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_set_uint(Z3_context c, Z3_params p, Z3_symbol k, unsigned v);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_set_uint ( Z3Context c, Z3ParameterSet p, Z3Symbol k, uint v ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_to_string: c _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_params_to_string(Z3_context c, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_params_to_string ( Z3Context c, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _params_validate: c _: p _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_params_validate(Z3_context c, Z3_params p, Z3_param_descrs d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_params_validate ( Z3Context c, Z3ParameterSet p, Z3ParameterDescriptionSet d ) )

]

{ #category : #'API - private' }
LibZ3 >> _parse_smtlib2_file: c _: file_name _: num_sorts _: sort_names _: sorts _: num_decls _: decl_names _: decls [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_parse_smtlib2_file(Z3_context c,
										Z3_string file_name,
										unsigned num_sorts,
										Z3_symbol const sort_names[],
										Z3_sort const sorts[],
										unsigned num_decls,
										Z3_symbol const decl_names[],
										Z3_func_decl const decls[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_parse_smtlib2_file ( Z3Context c, char * file_name, uint num_sorts, FFIExternalArray sort_names, FFIExternalArray sorts, uint num_decls, FFIExternalArray decl_names, FFIExternalArray decls ) )

]

{ #category : #'API - private' }
LibZ3 >> _parse_smtlib2_string: c _: str _: num_sorts _: sort_names _: sorts _: num_decls _: decl_names _: decls [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_parse_smtlib2_string(Z3_context c,
										  Z3_string str,
										  unsigned num_sorts,
										  Z3_symbol const sort_names[],
										  Z3_sort const sorts[],
										  unsigned num_decls,
										  Z3_symbol const decl_names[],
										  Z3_func_decl const decls[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_parse_smtlib2_string ( Z3Context c, char * str, uint num_sorts, FFIExternalArray sort_names, FFIExternalArray sorts, uint num_decls, FFIExternalArray decl_names, FFIExternalArray decls ) )

]

{ #category : #'API - private' }
LibZ3 >> _parser_context_add_decl: c _: pc _: f [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_parser_context_add_decl(Z3_context c, Z3_parser_context pc, Z3_func_decl f);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PARSER_CONTEXT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _parser_context_add_sort: c _: pc _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_parser_context_add_sort(Z3_context c, Z3_parser_context pc, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PARSER_CONTEXT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _parser_context_dec_ref: c _: pc [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_parser_context_dec_ref(Z3_context c, Z3_parser_context pc);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PARSER_CONTEXT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _parser_context_from_string: c _: pc _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_parser_context_from_string(Z3_context c, Z3_parser_context pc, Z3_string s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PARSER_CONTEXT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _parser_context_inc_ref: c _: pc [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_parser_context_inc_ref(Z3_context c, Z3_parser_context pc);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PARSER_CONTEXT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _pattern_to_ast: c _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_pattern_to_ast(Z3_context c, Z3_pattern p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_pattern_to_ast ( Z3Context c, Z3Pattern p ) )

]

{ #category : #'API - private' }
LibZ3 >> _pattern_to_string: c _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_pattern_to_string(Z3_context c, Z3_pattern p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_pattern_to_string ( Z3Context c, Z3Pattern p ) )

]

{ #category : #'API - private' }
LibZ3 >> _polynomial_subresultants: c _: p _: q _: x [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_polynomial_subresultants(Z3_context c, Z3_ast p, Z3_ast q, Z3_ast x);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_polynomial_subresultants ( Z3Context c, Z3AST p, Z3AST q, Z3AST x ) )

]

{ #category : #'API - private' }
LibZ3 >> _probe_and: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_and(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_apply: c _: p _: g [
	"
		PRIVATE - DO NOT USE!

		double Z3_API Z3_probe_apply(Z3_context c, Z3_probe p, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_const: x _: val [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_const(Z3_context x, double val);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_dec_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_probe_dec_ref(Z3_context c, Z3_probe p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_eq: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_eq(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_ge: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_ge(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_get_descr: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_probe_get_descr(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_probe_get_descr ( Z3Context c, char * name ) )

]

{ #category : #'API - private' }
LibZ3 >> _probe_gt: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_gt(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_inc_ref: c _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_probe_inc_ref(Z3_context c, Z3_probe p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_le: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_le(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_lt: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_lt(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_not: x _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_not(Z3_context x, Z3_probe p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _probe_or: x _: p1 _: p2 [
	"
		PRIVATE - DO NOT USE!

		Z3_probe Z3_API Z3_probe_or(Z3_context x, Z3_probe p1, Z3_probe p2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PROBE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _qe_model_project: c _: m _: num_bounds _: bound _: body [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_qe_model_project
	  (Z3_context c,
	   Z3_model m,
	   unsigned num_bounds,
	   Z3_app const bound[],
	   Z3_ast body);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_qe_model_project ( Z3Context c, Z3Model m, uint num_bounds, FFIExternalArray bound, Z3AST body ) )

]

{ #category : #'API - private' }
LibZ3 >> _qe_model_project_skolem: c _: m _: num_bounds _: bound _: body _: map [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_qe_model_project_skolem
	  (Z3_context c,
	   Z3_model m,
	   unsigned num_bounds,
	   Z3_app const bound[],
	   Z3_ast body,
	   Z3_ast_map map);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type AST_MAP not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _query_constructor: c _: constr _: num_fields _: constructor _: tester _: accessors [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_query_constructor(Z3_context c,
									 Z3_constructor constr,
									 unsigned num_fields,
									 Z3_func_decl* constructor,
									 Z3_func_decl* tester,
									 Z3_func_decl accessors[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_query_constructor ( Z3Context c, Z3Constructor constr, uint num_fields, FFIExternalArray constructor, FFIExternalArray tester, FFIExternalArray accessors ) )

]

{ #category : #'API - private' }
LibZ3 >> _rcf_add: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_add(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_coefficient: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_coefficient(Z3_context c, Z3_rcf_num a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_del: c _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_rcf_del(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_div: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_div(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_eq: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_eq(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_extension_index: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_rcf_extension_index(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_ge: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_ge(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_get_numerator_denominator: c _: a _: n _: d [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_rcf_get_numerator_denominator(Z3_context c, Z3_rcf_num a, Z3_rcf_num * n, Z3_rcf_num * d);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_gt: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_gt(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_infinitesimal_name: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_rcf_infinitesimal_name(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_interval: c _: a _: lower_is_inf _: lower_is_open _: lower _: upper_is_inf _: upper_is_open _: upper [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_rcf_interval(Z3_context c, Z3_rcf_num a, int * lower_is_inf, int * lower_is_open, Z3_rcf_num * lower, int * upper_is_inf, int * upper_is_open, Z3_rcf_num * upper);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_inv: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_inv(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_is_algebraic: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_is_algebraic(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_is_infinitesimal: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_is_infinitesimal(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_is_rational: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_is_rational(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_is_transcendental: c _: a [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_is_transcendental(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_le: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_le(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_lt: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_lt(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_e: c [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mk_e(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_infinitesimal: c [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mk_infinitesimal(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_pi: c [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mk_pi(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_rational: c _: val [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mk_rational(Z3_context c, Z3_string val);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_roots: c _: n _: a _: roots [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_rcf_mk_roots(Z3_context c, unsigned n, Z3_rcf_num const a[], Z3_rcf_num roots[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_rcf_mk_roots ( Z3Context c, uint n, FFIExternalArray a, FFIExternalArray roots ) )

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mk_small_int: c _: val [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mk_small_int(Z3_context c, int val);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_mul: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_mul(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_neg: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_neg(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_neq: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_rcf_neq(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_num_coefficients: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_rcf_num_coefficients(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_num_sign_condition_coefficients: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_rcf_num_sign_condition_coefficients(Z3_context c, Z3_rcf_num a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_num_sign_conditions: c _: a [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_rcf_num_sign_conditions(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_num_to_decimal_string: c _: a _: prec [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_rcf_num_to_decimal_string(Z3_context c, Z3_rcf_num a, unsigned prec);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_num_to_string: c _: a _: compact _: html [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_rcf_num_to_string(Z3_context c, Z3_rcf_num a, bool compact, bool html);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_power: c _: a _: k [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_power(Z3_context c, Z3_rcf_num a, unsigned k);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_sign_condition_coefficient: c _: a _: i _: j [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_sign_condition_coefficient(Z3_context c, Z3_rcf_num a, unsigned i, unsigned j);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_sign_condition_sign: c _: a _: i [
	"
		PRIVATE - DO NOT USE!

		int Z3_API Z3_rcf_sign_condition_sign(Z3_context c, Z3_rcf_num a, unsigned i);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_sub: c _: a _: b [
	"
		PRIVATE - DO NOT USE!

		Z3_rcf_num Z3_API Z3_rcf_sub(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _rcf_transcendental_name: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_symbol Z3_API Z3_rcf_transcendental_name(Z3_context c, Z3_rcf_num a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type RCF_NUM not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _reset_memory [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_reset_memory(void);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_reset_memory ( ) )

]

{ #category : #'API - private' }
LibZ3 >> _set_ast_print_mode: c _: mode [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_set_ast_print_mode(Z3_context c, Z3_ast_print_mode mode);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type PRINT_MODE not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _set_error: c _: e [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_set_error(Z3_context c, Z3_error_code e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_set_error ( Z3Context c, uint e ) )

]

{ #category : #'API - private' }
LibZ3 >> _set_error_handler: c _: h [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_set_error_handler(Z3_context c, Z3_error_handler h);

		WARNING: This method hand-written since Z3 headers do not contain
		`def_API` directive for this function. Maybe a bug.
	"
	^ self ffiCall: #( void Z3_set_error_handler ( Z3Context c, void * h) )

]

{ #category : #'API - private' }
LibZ3 >> _set_param_value: c _: param_id _: param_value [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_set_param_value(Z3_config c, Z3_string param_id, Z3_string param_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_set_param_value ( Z3Config c, char * param_id, char * param_value ) )

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_and_then: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_simplifier Z3_API Z3_simplifier_and_then(Z3_context c, Z3_simplifier t1, Z3_simplifier t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_dec_ref: c _: g [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_simplifier_dec_ref(Z3_context c, Z3_simplifier g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_get_descr: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_simplifier_get_descr(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_simplifier_get_descr ( Z3Context c, char * name ) )

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_get_help: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_simplifier_get_help(Z3_context c, Z3_simplifier t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_get_param_descrs: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_simplifier_get_param_descrs(Z3_context c, Z3_simplifier t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_inc_ref: c _: t [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_simplifier_inc_ref(Z3_context c, Z3_simplifier t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplifier_using_params: c _: t _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_simplifier Z3_API Z3_simplifier_using_params(Z3_context c, Z3_simplifier t, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _simplify: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_simplify(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_simplify ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _simplify_ex: c _: a _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_simplify_ex(Z3_context c, Z3_ast a, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_simplify_ex ( Z3Context c, Z3AST a, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _simplify_get_help: c [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_simplify_get_help(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_simplify_get_help ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _simplify_get_param_descrs: c [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_simplify_get_param_descrs(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ParameterDescriptionSet Z3_simplify_get_param_descrs ( Z3Context c ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_add_simplifier: c _: solver _: simplifier [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_solver_add_simplifier(Z3_context c, Z3_solver solver, Z3_simplifier simplifier);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SIMPLIFIER not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_assert: c _: s _: a [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_assert(Z3_context c, Z3_solver s, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_assert ( Z3Context c, Z3Solver s, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_assert_and_track: c _: s _: a _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_assert_and_track(Z3_context c, Z3_solver s, Z3_ast a, Z3_ast p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_assert_and_track ( Z3Context c, Z3Solver s, Z3AST a, Z3AST p ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_check: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_solver_check(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_solver_check ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_check_assumptions: c _: s _: num_assumptions _: assumptions [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_solver_check_assumptions(Z3_context c, Z3_solver s,
												unsigned num_assumptions, Z3_ast const assumptions[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_solver_check_assumptions ( Z3Context c, Z3Solver s, uint num_assumptions, FFIExternalArray assumptions ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_congruence_next: c _: s _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_solver_congruence_next(Z3_context c, Z3_solver s, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_solver_congruence_next ( Z3Context c, Z3Solver s, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_congruence_root: c _: s _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_solver_congruence_root(Z3_context c, Z3_solver s, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_solver_congruence_root ( Z3Context c, Z3Solver s, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_cube: c _: s _: vars _: backtrack_level [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_cube(Z3_context c, Z3_solver s, Z3_ast_vector vars, unsigned backtrack_level);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_cube ( Z3Context c, Z3Solver s, Z3ASTVector vars, uint backtrack_level ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_dec_ref: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_dec_ref(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_dec_ref ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_from_file: c _: s _: file_name [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_from_file(Z3_context c, Z3_solver s, Z3_string file_name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_from_file ( Z3Context c, Z3Solver s, char * file_name ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_from_string: c _: s _: file_name [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_from_string(Z3_context c, Z3_solver s, Z3_string file_name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_from_string ( Z3Context c, Z3Solver s, char * file_name ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_assertions: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_get_assertions(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_get_assertions ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_consequences: c _: s _: assumptions _: variables _: consequences [
	"
		PRIVATE - DO NOT USE!

		Z3_lbool Z3_API Z3_solver_get_consequences(Z3_context c,
											   Z3_solver s,
											   Z3_ast_vector assumptions,
											   Z3_ast_vector variables,
											   Z3_ast_vector consequences);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( int Z3_solver_get_consequences ( Z3Context c, Z3Solver s, Z3ASTVector assumptions, Z3ASTVector variables, Z3ASTVector consequences ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_help: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_solver_get_help(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_solver_get_help ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_levels: c _: s _: literals _: sz _: levels [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_get_levels(Z3_context c, Z3_solver s, Z3_ast_vector literals, unsigned sz,  unsigned levels[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_get_levels ( Z3Context c, Z3Solver s, Z3ASTVector literals, uint sz, FFIExternalArray levels ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_model: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_model Z3_API Z3_solver_get_model(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Model Z3_solver_get_model ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_non_units: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_get_non_units(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_get_non_units ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_num_scopes: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_solver_get_num_scopes(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( uint Z3_solver_get_num_scopes ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_param_descrs: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_solver_get_param_descrs(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ParameterDescriptionSet Z3_solver_get_param_descrs ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_proof: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_solver_get_proof(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_solver_get_proof ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_reason_unknown: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_solver_get_reason_unknown(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_solver_get_reason_unknown ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_statistics: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_stats Z3_API Z3_solver_get_statistics(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_trail: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_get_trail(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_get_trail ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_units: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_get_units(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_get_units ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_get_unsat_core: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast_vector Z3_API Z3_solver_get_unsat_core(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3ASTVector Z3_solver_get_unsat_core ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_import_model_converter: ctx _: src _: dst [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_import_model_converter(Z3_context ctx, Z3_solver src, Z3_solver dst);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_import_model_converter ( Z3Context ctx, Z3Solver src, Z3Solver dst ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_inc_ref: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_inc_ref(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_inc_ref ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_interrupt: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_interrupt(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_interrupt ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_next_split: c _: cb _: t _: idx _: phase [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_solver_next_split(Z3_context c, Z3_solver_callback cb,  Z3_ast t, unsigned idx, Z3_lbool phase);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SOLVER_CALLBACK not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_pop: c _: s _: n [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_pop(Z3_context c, Z3_solver s, unsigned n);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_pop ( Z3Context c, Z3Solver s, uint n ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_consequence: c _: cb _: num_fixed _: fixed _: num_eqs _: eq_lhs _: eq_rhs _: conseq [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_solver_propagate_consequence(Z3_context c, Z3_solver_callback cb, unsigned num_fixed, Z3_ast const* fixed, unsigned num_eqs, Z3_ast const* eq_lhs, Z3_ast const* eq_rhs, Z3_ast conseq);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SOLVER_CALLBACK not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_created: c _: s _: created_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_created(Z3_context c, Z3_solver s, Z3_created_eh created_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_decide: c _: s _: decide_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_decide(Z3_context c, Z3_solver s, Z3_decide_eh decide_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_declare: c _: name _: n _: domain _: range [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_solver_propagate_declare(Z3_context c, Z3_symbol name, unsigned n, Z3_sort* domain, Z3_sort range);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_solver_propagate_declare ( Z3Context c, Z3Symbol name, uint n, FFIExternalArray domain, Z3Sort range ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_diseq: c _: s _: eq_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_diseq(Z3_context c, Z3_solver s, Z3_eq_eh eq_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_eq: c _: s _: eq_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_eq(Z3_context c, Z3_solver s, Z3_eq_eh eq_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_final: c _: s _: final_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_final(Z3_context c, Z3_solver s, Z3_final_eh final_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_fixed: c _: s _: fixed_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_fixed(Z3_context c, Z3_solver s, Z3_fixed_eh fixed_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_init: c _: s _: user_context _: push_eh _: pop_eh _: fresh_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_init(
		Z3_context  c,
		Z3_solver   s,
		void*       user_context,
		Z3_push_eh  push_eh,
		Z3_pop_eh   pop_eh,
		Z3_fresh_eh fresh_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_register: c _: s _: e [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_register(Z3_context c, Z3_solver s, Z3_ast e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_propagate_register ( Z3Context c, Z3Solver s, Z3AST e ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_propagate_register_cb: c _: cb _: e [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_propagate_register_cb(Z3_context c, Z3_solver_callback cb, Z3_ast e);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type SOLVER_CALLBACK not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_push: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_push(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_push ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_register_on_clause: c _: s _: user_context _: on_clause_eh [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_register_on_clause(
		Z3_context  c,
		Z3_solver   s,
		void*       user_context,
		Z3_on_clause_eh on_clause_eh);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Closures (callbacks) not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _solver_reset: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_reset(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_reset ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_set_params: c _: s _: p [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_solver_set_params(Z3_context c, Z3_solver s, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_solver_set_params ( Z3Context c, Z3Solver s, Z3ParameterSet p ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_to_dimacs_string: c _: s _: include_names [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_solver_to_dimacs_string(Z3_context c, Z3_solver s, bool include_names);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_solver_to_dimacs_string ( Z3Context c, Z3Solver s, bool include_names ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_to_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_solver_to_string(Z3_context c, Z3_solver s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_solver_to_string ( Z3Context c, Z3Solver s ) )

]

{ #category : #'API - private' }
LibZ3 >> _solver_translate: source _: s _: target [
	"
		PRIVATE - DO NOT USE!

		Z3_solver Z3_API Z3_solver_translate(Z3_context source, Z3_solver s, Z3_context target);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3Solver Z3_solver_translate ( Z3Context source, Z3Solver s, Z3Context target ) )

]

{ #category : #'API - private' }
LibZ3 >> _sort_to_ast: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_sort_to_ast(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_sort_to_ast ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _sort_to_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_sort_to_string(Z3_context c, Z3_sort s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_sort_to_string ( Z3Context c, Z3Sort s ) )

]

{ #category : #'API - private' }
LibZ3 >> _stats_dec_ref: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_stats_dec_ref(Z3_context c, Z3_stats s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_get_double_value: c _: s _: idx [
	"
		PRIVATE - DO NOT USE!

		double Z3_API Z3_stats_get_double_value(Z3_context c, Z3_stats s, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_get_key: c _: s _: idx [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_stats_get_key(Z3_context c, Z3_stats s, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_get_uint_value: c _: s _: idx [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_stats_get_uint_value(Z3_context c, Z3_stats s, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_inc_ref: c _: s [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_stats_inc_ref(Z3_context c, Z3_stats s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_is_double: c _: s _: idx [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_stats_is_double(Z3_context c, Z3_stats s, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_is_uint: c _: s _: idx [
	"
		PRIVATE - DO NOT USE!

		bool Z3_API Z3_stats_is_uint(Z3_context c, Z3_stats s, unsigned idx);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_size: c _: s [
	"
		PRIVATE - DO NOT USE!

		unsigned Z3_API Z3_stats_size(Z3_context c, Z3_stats s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _stats_to_string: c _: s [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_stats_to_string(Z3_context c, Z3_stats s);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type STATS not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _substitute: c _: a _: num_exprs _: from _: to [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_substitute(Z3_context c,
								Z3_ast a,
								unsigned num_exprs,
								Z3_ast const from[],
								Z3_ast const to[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_substitute ( Z3Context c, Z3AST a, uint num_exprs, FFIExternalArray from, FFIExternalArray to ) )

]

{ #category : #'API - private' }
LibZ3 >> _substitute_funs: c _: a _: num_funs _: from _: to [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_substitute_funs(Z3_context c,
									 Z3_ast a,
									 unsigned num_funs,
									 Z3_func_decl const from[],
									 Z3_ast const to[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_substitute_funs ( Z3Context c, Z3AST a, uint num_funs, FFIExternalArray from, FFIExternalArray to ) )

]

{ #category : #'API - private' }
LibZ3 >> _substitute_vars: c _: a _: num_exprs _: to [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_substitute_vars(Z3_context c,
									 Z3_ast a,
									 unsigned num_exprs,
									 Z3_ast const to[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_substitute_vars ( Z3Context c, Z3AST a, uint num_exprs, FFIExternalArray to ) )

]

{ #category : #'API - private' }
LibZ3 >> _tactic_and_then: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_and_then(Z3_context c, Z3_tactic t1, Z3_tactic t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_apply: c _: t _: g [
	"
		PRIVATE - DO NOT USE!

		Z3_apply_result Z3_API Z3_tactic_apply(Z3_context c, Z3_tactic t, Z3_goal g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_apply_ex: c _: t _: g _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_apply_result Z3_API Z3_tactic_apply_ex(Z3_context c, Z3_tactic t, Z3_goal g, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type APPLY_RESULT not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_cond: c _: p _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_cond(Z3_context c, Z3_probe p, Z3_tactic t1, Z3_tactic t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_dec_ref: c _: g [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_tactic_dec_ref(Z3_context c, Z3_tactic g);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_fail: c [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_fail(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_fail_if: c _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_fail_if(Z3_context c, Z3_probe p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_fail_if_not_decided: c [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_fail_if_not_decided(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_get_descr: c _: name [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_tactic_get_descr(Z3_context c, Z3_string name);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( char * Z3_tactic_get_descr ( Z3Context c, char * name ) )

]

{ #category : #'API - private' }
LibZ3 >> _tactic_get_help: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_string Z3_API Z3_tactic_get_help(Z3_context c, Z3_tactic t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_get_param_descrs: c _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_param_descrs Z3_API Z3_tactic_get_param_descrs(Z3_context c, Z3_tactic t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_inc_ref: c _: t [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_tactic_inc_ref(Z3_context c, Z3_tactic t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_or_else: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_or_else(Z3_context c, Z3_tactic t1, Z3_tactic t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_par_and_then: c _: t1 _: t2 [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_par_and_then(Z3_context c, Z3_tactic t1, Z3_tactic t2);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_par_or: c _: num _: ts [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_par_or(Z3_context c, unsigned num, Z3_tactic const ts[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_repeat: c _: t _: max [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_repeat(Z3_context c, Z3_tactic t, unsigned max);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_skip: c [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_skip(Z3_context c);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_try_for: c _: t _: ms [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_try_for(Z3_context c, Z3_tactic t, unsigned ms);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_using_params: c _: t _: p [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_using_params(Z3_context c, Z3_tactic t, Z3_params p);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _tactic_when: c _: p _: t [
	"
		PRIVATE - DO NOT USE!

		Z3_tactic Z3_API Z3_tactic_when(Z3_context c, Z3_probe p, Z3_tactic t);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self error: 'API not (yet) supported: Type TACTIC not (yet) supported.'

]

{ #category : #'API - private' }
LibZ3 >> _to_app: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_app Z3_API Z3_to_app(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_to_app ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _to_func_decl: c _: a [
	"
		PRIVATE - DO NOT USE!

		Z3_func_decl Z3_API Z3_to_func_decl(Z3_context c, Z3_ast a);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3FuncDecl Z3_to_func_decl ( Z3Context c, Z3AST a ) )

]

{ #category : #'API - private' }
LibZ3 >> _toggle_warning_messages: enabled [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_toggle_warning_messages(bool enabled);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_toggle_warning_messages ( bool enabled ) )

]

{ #category : #'API - private' }
LibZ3 >> _translate: source _: a _: target [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_translate(Z3_context source, Z3_ast a, Z3_context target);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_translate ( Z3Context source, Z3AST a, Z3Context target ) )

]

{ #category : #'API - private' }
LibZ3 >> _update_param_value: c _: param_id _: param_value [
	"
		PRIVATE - DO NOT USE!

		void Z3_API Z3_update_param_value(Z3_context c, Z3_string param_id, Z3_string param_value);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( void Z3_update_param_value ( Z3Context c, char * param_id, char * param_value ) )

]

{ #category : #'API - private' }
LibZ3 >> _update_term: c _: a _: num_args _: args [
	"
		PRIVATE - DO NOT USE!

		Z3_ast Z3_API Z3_update_term(Z3_context c, Z3_ast a, unsigned num_args, Z3_ast const args[]);

		AUTOMATICALLY GENERATED BY apigen.py. DO NOT EDIT!
	"
	^ self ffiCall: #( Z3AST Z3_update_term ( Z3Context c, Z3AST a, uint num_args, FFIExternalArray args ) )

]

{ #category : #'accessing platform' }
LibZ3 >> macLibraryName [
	LibraryName ifNil: [^'libz3.dylib'] ifNotNil: [^LibraryName]
]

{ #category : #'accessing platform' }
LibZ3 >> unixLibraryName [
	LibraryName ifNil: [^'libz3.so'] ifNotNil: [^LibraryName]
]

{ #category : #'accessing platform' }
LibZ3 >> win32ModuleName [
	LibraryName ifNil: [^'libz3.dll'] ifNotNil: [^LibraryName]
]
