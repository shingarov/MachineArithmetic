Class {
	#name : #Int,
	#superclass : #Z3ArithmeticNode,
	#category : #'Z3-Core'
}

{ #category : #'instance creation' }
Int class >> create: n constantsPrefix: x [
	"Create an array of n Int constants: x__1, x__2,... x__n"
	^(1 to: n) collect: [ :i |
		Int const: x, '__', i printString ]
]

{ #category : #types }
Int class >> sort [
	^Z3Sort int
]

{ #category : #converting }
Int >> asInteger [
	"Convert Z3 int to Smalltalk integer."
	^ self value
]

{ #category : #'as yet unclassified' }
Int >> equals: rhs modulo: m [
	^self - rhs \\ m === 0 toInt
]

{ #category : #testing }
Int >> isInt [
	^true
]

{ #category : #adapting }
Int >> retry: selector coercing: rhs [
	^rhs adaptToInt: self andSend: selector
]

{ #category : #converting }
Int >> toBitVector: size [
	^ Z3 mk_int2bv: ctx _: size _: self

]

{ #category : #converting }
Int >> toInt [
	^self
]

{ #category : #converting }
Int >> toReal [
	^ Z3 mk_int2real: ctx _: self

]
